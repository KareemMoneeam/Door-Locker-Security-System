
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000357c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  0000357c  00003610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800196  00800196  00003746  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001469  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 09 	call	0x1366	; 0x1366 <main>
      8a:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <fillPasswordArray>:

/*
 * Description :
 * Private function to fill password arrays
 * its arguments are password size and the password array */
static void fillPasswordArray(uint8 size, uint8 *array) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	af 97       	sbiw	r28, 0x2f	; 47
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8d a7       	std	Y+45, r24	; 0x2d
     b5c:	7f a7       	std	Y+47, r23	; 0x2f
     b5e:	6e a7       	std	Y+46, r22	; 0x2e
	/*Loop Counter*/
	uint8 i = 0;
     b60:	1c a6       	std	Y+44, r1	; 0x2c
	/*Pressed Key*/
	uint8 key = 0;
     b62:	1b a6       	std	Y+43, r1	; 0x2b
     b64:	88 c0       	rjmp	.+272    	; 0xc76 <fillPasswordArray+0x130>
	/*Loop to fill password array */
	while (i < size) {
		/* Get the pressed key number,
		 * if any switch pressed for more than 500ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     b66:	0e 94 66 11 	call	0x22cc	; 0x22cc <KEYPAD_getPressedKey>
     b6a:	8b a7       	std	Y+43, r24	; 0x2b
		if ((key >= 0) && (key <= 9)) {
     b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b6e:	8a 30       	cpi	r24, 0x0A	; 10
     b70:	80 f4       	brcc	.+32     	; 0xb92 <fillPasswordArray+0x4c>
			array[i] = key;
     b72:	8c a5       	ldd	r24, Y+44	; 0x2c
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	8e a5       	ldd	r24, Y+46	; 0x2e
     b7a:	9f a5       	ldd	r25, Y+47	; 0x2f
     b7c:	fc 01       	movw	r30, r24
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	8b a5       	ldd	r24, Y+43	; 0x2b
     b84:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     b86:	8a e2       	ldi	r24, 0x2A	; 42
     b88:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayCharacter>
			i++;
     b8c:	8c a5       	ldd	r24, Y+44	; 0x2c
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	8c a7       	std	Y+44, r24	; 0x2c
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	aa ef       	ldi	r26, 0xFA	; 250
     b98:	b3 e4       	ldi	r27, 0x43	; 67
     b9a:	8f a3       	std	Y+39, r24	; 0x27
     b9c:	98 a7       	std	Y+40, r25	; 0x28
     b9e:	a9 a7       	std	Y+41, r26	; 0x29
     ba0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba2:	6f a1       	ldd	r22, Y+39	; 0x27
     ba4:	78 a5       	ldd	r23, Y+40	; 0x28
     ba6:	89 a5       	ldd	r24, Y+41	; 0x29
     ba8:	9a a5       	ldd	r25, Y+42	; 0x2a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a ef       	ldi	r20, 0xFA	; 250
     bb0:	54 e4       	ldi	r21, 0x44	; 68
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	8b a3       	std	Y+35, r24	; 0x23
     bbc:	9c a3       	std	Y+36, r25	; 0x24
     bbe:	ad a3       	std	Y+37, r26	; 0x25
     bc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bc2:	6b a1       	ldd	r22, Y+35	; 0x23
     bc4:	7c a1       	ldd	r23, Y+36	; 0x24
     bc6:	8d a1       	ldd	r24, Y+37	; 0x25
     bc8:	9e a1       	ldd	r25, Y+38	; 0x26
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <fillPasswordArray+0x9e>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9a a3       	std	Y+34, r25	; 0x22
     be0:	89 a3       	std	Y+33, r24	; 0x21
     be2:	3f c0       	rjmp	.+126    	; 0xc62 <fillPasswordArray+0x11c>
	else if (__tmp > 65535)
     be4:	6b a1       	ldd	r22, Y+35	; 0x23
     be6:	7c a1       	ldd	r23, Y+36	; 0x24
     be8:	8d a1       	ldd	r24, Y+37	; 0x25
     bea:	9e a1       	ldd	r25, Y+38	; 0x26
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	4c f5       	brge	.+82     	; 0xc4e <fillPasswordArray+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfc:	6f a1       	ldd	r22, Y+39	; 0x27
     bfe:	78 a5       	ldd	r23, Y+40	; 0x28
     c00:	89 a5       	ldd	r24, Y+41	; 0x29
     c02:	9a a5       	ldd	r25, Y+42	; 0x2a
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9a a3       	std	Y+34, r25	; 0x22
     c22:	89 a3       	std	Y+33, r24	; 0x21
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <fillPasswordArray+0xfe>
     c26:	88 ec       	ldi	r24, 0xC8	; 200
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	98 a3       	std	Y+32, r25	; 0x20
     c2c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c30:	98 a1       	ldd	r25, Y+32	; 0x20
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <fillPasswordArray+0xec>
     c36:	98 a3       	std	Y+32, r25	; 0x20
     c38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3a:	89 a1       	ldd	r24, Y+33	; 0x21
     c3c:	9a a1       	ldd	r25, Y+34	; 0x22
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9a a3       	std	Y+34, r25	; 0x22
     c42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c44:	89 a1       	ldd	r24, Y+33	; 0x21
     c46:	9a a1       	ldd	r25, Y+34	; 0x22
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	69 f7       	brne	.-38     	; 0xc26 <fillPasswordArray+0xe0>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <fillPasswordArray+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4e:	6b a1       	ldd	r22, Y+35	; 0x23
     c50:	7c a1       	ldd	r23, Y+36	; 0x24
     c52:	8d a1       	ldd	r24, Y+37	; 0x25
     c54:	9e a1       	ldd	r25, Y+38	; 0x26
     c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9a a3       	std	Y+34, r25	; 0x22
     c60:	89 a3       	std	Y+33, r24	; 0x21
     c62:	89 a1       	ldd	r24, Y+33	; 0x21
     c64:	9a a1       	ldd	r25, Y+34	; 0x22
     c66:	9e 8f       	std	Y+30, r25	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <fillPasswordArray+0x128>
     c72:	9e 8f       	std	Y+30, r25	; 0x1e
     c74:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Loop Counter*/
	uint8 i = 0;
	/*Pressed Key*/
	uint8 key = 0;
	/*Loop to fill password array */
	while (i < size) {
     c76:	9c a5       	ldd	r25, Y+44	; 0x2c
     c78:	8d a5       	ldd	r24, Y+45	; 0x2d
     c7a:	98 17       	cp	r25, r24
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <fillPasswordArray+0x13a>
     c7e:	73 cf       	rjmp	.-282    	; 0xb66 <fillPasswordArray+0x20>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a8 ec       	ldi	r26, 0xC8	; 200
     c86:	b2 e4       	ldi	r27, 0x42	; 66
     c88:	89 8f       	std	Y+25, r24	; 0x19
     c8a:	9a 8f       	std	Y+26, r25	; 0x1a
     c8c:	ab 8f       	std	Y+27, r26	; 0x1b
     c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c90:	69 8d       	ldd	r22, Y+25	; 0x19
     c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	4a ef       	ldi	r20, 0xFA	; 250
     c9e:	54 e4       	ldi	r21, 0x44	; 68
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	8d 8b       	std	Y+21, r24	; 0x15
     caa:	9e 8b       	std	Y+22, r25	; 0x16
     cac:	af 8b       	std	Y+23, r26	; 0x17
     cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cb0:	6d 89       	ldd	r22, Y+21	; 0x15
     cb2:	7e 89       	ldd	r23, Y+22	; 0x16
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <fillPasswordArray+0x18c>
		__ticks = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9c 8b       	std	Y+20, r25	; 0x14
     cce:	8b 8b       	std	Y+19, r24	; 0x13
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <fillPasswordArray+0x20a>
	else if (__tmp > 65535)
     cd2:	6d 89       	ldd	r22, Y+21	; 0x15
     cd4:	7e 89       	ldd	r23, Y+22	; 0x16
     cd6:	8f 89       	ldd	r24, Y+23	; 0x17
     cd8:	98 8d       	ldd	r25, Y+24	; 0x18
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	4c f5       	brge	.+82     	; 0xd3c <fillPasswordArray+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cea:	69 8d       	ldd	r22, Y+25	; 0x19
     cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	9c 8b       	std	Y+20, r25	; 0x14
     d10:	8b 8b       	std	Y+19, r24	; 0x13
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <fillPasswordArray+0x1ec>
     d14:	88 ec       	ldi	r24, 0xC8	; 200
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9a 8b       	std	Y+18, r25	; 0x12
     d1a:	89 8b       	std	Y+17, r24	; 0x11
     d1c:	89 89       	ldd	r24, Y+17	; 0x11
     d1e:	9a 89       	ldd	r25, Y+18	; 0x12
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <fillPasswordArray+0x1da>
     d24:	9a 8b       	std	Y+18, r25	; 0x12
     d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	8b 89       	ldd	r24, Y+19	; 0x13
     d2a:	9c 89       	ldd	r25, Y+20	; 0x14
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9c 8b       	std	Y+20, r25	; 0x14
     d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	8b 89       	ldd	r24, Y+19	; 0x13
     d34:	9c 89       	ldd	r25, Y+20	; 0x14
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	69 f7       	brne	.-38     	; 0xd14 <fillPasswordArray+0x1ce>
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <fillPasswordArray+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3c:	6d 89       	ldd	r22, Y+21	; 0x15
     d3e:	7e 89       	ldd	r23, Y+22	; 0x16
     d40:	8f 89       	ldd	r24, Y+23	; 0x17
     d42:	98 8d       	ldd	r25, Y+24	; 0x18
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
     d50:	8b 89       	ldd	r24, Y+19	; 0x13
     d52:	9c 89       	ldd	r25, Y+20	; 0x14
     d54:	98 8b       	std	Y+16, r25	; 0x10
     d56:	8f 87       	std	Y+15, r24	; 0x0f
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	98 89       	ldd	r25, Y+16	; 0x10
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <fillPasswordArray+0x216>
     d60:	98 8b       	std	Y+16, r25	; 0x10
     d62:	8f 87       	std	Y+15, r24	; 0x0f
			i++;
		}
		_delay_ms(500);
	}
	_delay_ms(100);
	LCD_clearScreen();
     d64:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
	LCD_displayString("= : Enter");
     d68:	80 e6       	ldi	r24, 0x60	; 96
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	/*wait using polling technique until the user press the Enter*/
	while (KEYPAD_getPressedKey() != ENTER) {
     d70:	0e 94 66 11 	call	0x22cc	; 0x22cc <KEYPAD_getPressedKey>
     d74:	8d 33       	cpi	r24, 0x3D	; 61
     d76:	e1 f7       	brne	.-8      	; 0xd70 <fillPasswordArray+0x22a>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	aa ef       	ldi	r26, 0xFA	; 250
     d7e:	b3 e4       	ldi	r27, 0x43	; 67
     d80:	8b 87       	std	Y+11, r24	; 0x0b
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	ad 87       	std	Y+13, r26	; 0x0d
     d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d88:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a ef       	ldi	r20, 0xFA	; 250
     d96:	54 e4       	ldi	r21, 0x44	; 68
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	8f 83       	std	Y+7, r24	; 0x07
     da2:	98 87       	std	Y+8, r25	; 0x08
     da4:	a9 87       	std	Y+9, r26	; 0x09
     da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dbc:	88 23       	and	r24, r24
     dbe:	2c f4       	brge	.+10     	; 0xdca <fillPasswordArray+0x284>
		__ticks = 1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	3f c0       	rjmp	.+126    	; 0xe48 <fillPasswordArray+0x302>
	else if (__tmp > 65535)
     dca:	6f 81       	ldd	r22, Y+7	; 0x07
     dcc:	78 85       	ldd	r23, Y+8	; 0x08
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	4f e7       	ldi	r20, 0x7F	; 127
     dd8:	57 e4       	ldi	r21, 0x47	; 71
     dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dde:	18 16       	cp	r1, r24
     de0:	4c f5       	brge	.+82     	; 0xe34 <fillPasswordArray+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <fillPasswordArray+0x2e4>
     e0c:	88 ec       	ldi	r24, 0xC8	; 200
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9c 83       	std	Y+4, r25	; 0x04
     e12:	8b 83       	std	Y+3, r24	; 0x03
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <fillPasswordArray+0x2d2>
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	69 f7       	brne	.-38     	; 0xe0c <fillPasswordArray+0x2c6>
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <fillPasswordArray+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <fillPasswordArray+0x30e>
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500);
	LCD_clearScreen();
     e5c:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
	return;
}
     e60:	af 96       	adiw	r28, 0x2f	; 47
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <createPassword>:

/*
 * Description :
 * Function to create the system password
 * */
void createPassword(void) {
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6c 97       	sbiw	r28, 0x1c	; 28
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
	LCD_displayString("Create new");
     e86:	8a e6       	ldi	r24, 0x6A	; 106
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "password");
     e8e:	25 e7       	ldi	r18, 0x75	; 117
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	a9 01       	movw	r20, r18
     e98:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	aa e7       	ldi	r26, 0x7A	; 122
     ea2:	b4 e4       	ldi	r27, 0x44	; 68
     ea4:	89 8f       	std	Y+25, r24	; 0x19
     ea6:	9a 8f       	std	Y+26, r25	; 0x1a
     ea8:	ab 8f       	std	Y+27, r26	; 0x1b
     eaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	69 8d       	ldd	r22, Y+25	; 0x19
     eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8d 8b       	std	Y+21, r24	; 0x15
     ec6:	9e 8b       	std	Y+22, r25	; 0x16
     ec8:	af 8b       	std	Y+23, r26	; 0x17
     eca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ecc:	6d 89       	ldd	r22, Y+21	; 0x15
     ece:	7e 89       	ldd	r23, Y+22	; 0x16
     ed0:	8f 89       	ldd	r24, Y+23	; 0x17
     ed2:	98 8d       	ldd	r25, Y+24	; 0x18
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <createPassword+0x7c>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <createPassword+0xfa>
	else if (__tmp > 65535)
     eee:	6d 89       	ldd	r22, Y+21	; 0x15
     ef0:	7e 89       	ldd	r23, Y+22	; 0x16
     ef2:	8f 89       	ldd	r24, Y+23	; 0x17
     ef4:	98 8d       	ldd	r25, Y+24	; 0x18
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <createPassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	69 8d       	ldd	r22, Y+25	; 0x19
     f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9c 8b       	std	Y+20, r25	; 0x14
     f2c:	8b 8b       	std	Y+19, r24	; 0x13
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <createPassword+0xdc>
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9a 8b       	std	Y+18, r25	; 0x12
     f36:	89 8b       	std	Y+17, r24	; 0x11
     f38:	89 89       	ldd	r24, Y+17	; 0x11
     f3a:	9a 89       	ldd	r25, Y+18	; 0x12
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <createPassword+0xca>
     f40:	9a 8b       	std	Y+18, r25	; 0x12
     f42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	8b 89       	ldd	r24, Y+19	; 0x13
     f46:	9c 89       	ldd	r25, Y+20	; 0x14
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9c 8b       	std	Y+20, r25	; 0x14
     f4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	8b 89       	ldd	r24, Y+19	; 0x13
     f50:	9c 89       	ldd	r25, Y+20	; 0x14
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <createPassword+0xbe>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <createPassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6d 89       	ldd	r22, Y+21	; 0x15
     f5a:	7e 89       	ldd	r23, Y+22	; 0x16
     f5c:	8f 89       	ldd	r24, Y+23	; 0x17
     f5e:	98 8d       	ldd	r25, Y+24	; 0x18
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9c 8b       	std	Y+20, r25	; 0x14
     f6a:	8b 8b       	std	Y+19, r24	; 0x13
     f6c:	8b 89       	ldd	r24, Y+19	; 0x13
     f6e:	9c 89       	ldd	r25, Y+20	; 0x14
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	8f 87       	std	Y+15, r24	; 0x0f
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	98 89       	ldd	r25, Y+16	; 0x10
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <createPassword+0x106>
     f7c:	98 8b       	std	Y+16, r25	; 0x10
     f7e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1000);
	LCD_clearScreen();
     f80:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
     f84:	8e e7       	ldi	r24, 0x7E	; 126
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_moveCursor(1, 0);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_moveCursor>
	fillPasswordArray(PASSWORD_SIZE, g_password1);
     f94:	27 e9       	ldi	r18, 0x97	; 151
     f96:	31 e0       	ldi	r19, 0x01	; 1
     f98:	85 e0       	ldi	r24, 0x05	; 5
     f9a:	b9 01       	movw	r22, r18
     f9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <fillPasswordArray>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	aa ef       	ldi	r26, 0xFA	; 250
     fa6:	b3 e4       	ldi	r27, 0x43	; 67
     fa8:	8b 87       	std	Y+11, r24	; 0x0b
     faa:	9c 87       	std	Y+12, r25	; 0x0c
     fac:	ad 87       	std	Y+13, r26	; 0x0d
     fae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	4a ef       	ldi	r20, 0xFA	; 250
     fbe:	54 e4       	ldi	r21, 0x44	; 68
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	8f 83       	std	Y+7, r24	; 0x07
     fca:	98 87       	std	Y+8, r25	; 0x08
     fcc:	a9 87       	std	Y+9, r26	; 0x09
     fce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	5f e3       	ldi	r21, 0x3F	; 63
     fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe4:	88 23       	and	r24, r24
     fe6:	2c f4       	brge	.+10     	; 0xff2 <createPassword+0x180>
		__ticks = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
     ff0:	3f c0       	rjmp	.+126    	; 0x1070 <createPassword+0x1fe>
	else if (__tmp > 65535)
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	3f ef       	ldi	r19, 0xFF	; 255
     ffe:	4f e7       	ldi	r20, 0x7F	; 127
    1000:	57 e4       	ldi	r21, 0x47	; 71
    1002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1006:	18 16       	cp	r1, r24
    1008:	4c f5       	brge	.+82     	; 0x105c <createPassword+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100a:	6b 85       	ldd	r22, Y+11	; 0x0b
    100c:	7c 85       	ldd	r23, Y+12	; 0x0c
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e2       	ldi	r20, 0x20	; 32
    1018:	51 e4       	ldi	r21, 0x41	; 65
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <createPassword+0x1e0>
    1034:	88 ec       	ldi	r24, 0xC8	; 200
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <createPassword+0x1ce>
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	69 f7       	brne	.-38     	; 0x1034 <createPassword+0x1c2>
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <createPassword+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105c:	6f 81       	ldd	r22, Y+7	; 0x07
    105e:	78 85       	ldd	r23, Y+8	; 0x08
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <createPassword+0x20a>
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
	LCD_clearScreen();
    1084:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
	LCD_displayString("Plz re-enter the");
    1088:	8e e8       	ldi	r24, 0x8E	; 142
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "same pass: ");
    1090:	2f e9       	ldi	r18, 0x9F	; 159
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
	fillPasswordArray(PASSWORD_SIZE, g_password2);
    109e:	2c e9       	ldi	r18, 0x9C	; 156
    10a0:	31 e0       	ldi	r19, 0x01	; 1
    10a2:	85 e0       	ldi	r24, 0x05	; 5
    10a4:	b9 01       	movw	r22, r18
    10a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <fillPasswordArray>
	LCD_clearScreen();
    10aa:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>

}
    10ae:	6c 96       	adiw	r28, 0x1c	; 28
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <sendPassword>:

/*
 * Description :
 * Function to send an array of bytes (a password) through UART to the Control ECU
 * */
void sendPassword(uint8 size, uint8 *password) {
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	62 97       	sbiw	r28, 0x12	; 18
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	88 8b       	std	Y+16, r24	; 0x10
    10d6:	7a 8b       	std	Y+18, r23	; 0x12
    10d8:	69 8b       	std	Y+17, r22	; 0x11
	uint8 i;

	for (i = 0; i < size; i++) {
    10da:	1f 86       	std	Y+15, r1	; 0x0f
    10dc:	80 c0       	rjmp	.+256    	; 0x11de <sendPassword+0x11e>
		UART_sendByte(password[i]);
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	89 89       	ldd	r24, Y+17	; 0x11
    10e6:	9a 89       	ldd	r25, Y+18	; 0x12
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	80 81       	ld	r24, Z
    10f0:	0e 94 8c 19 	call	0x3318	; 0x3318 <UART_sendByte>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a0 e4       	ldi	r26, 0x40	; 64
    10fa:	b0 e4       	ldi	r27, 0x40	; 64
    10fc:	8b 87       	std	Y+11, r24	; 0x0b
    10fe:	9c 87       	std	Y+12, r25	; 0x0c
    1100:	ad 87       	std	Y+13, r26	; 0x0d
    1102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	6b 85       	ldd	r22, Y+11	; 0x0b
    1106:	7c 85       	ldd	r23, Y+12	; 0x0c
    1108:	8d 85       	ldd	r24, Y+13	; 0x0d
    110a:	9e 85       	ldd	r25, Y+14	; 0x0e
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a ef       	ldi	r20, 0xFA	; 250
    1112:	54 e4       	ldi	r21, 0x44	; 68
    1114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	8f 83       	std	Y+7, r24	; 0x07
    111e:	98 87       	std	Y+8, r25	; 0x08
    1120:	a9 87       	std	Y+9, r26	; 0x09
    1122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e8       	ldi	r20, 0x80	; 128
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1138:	88 23       	and	r24, r24
    113a:	2c f4       	brge	.+10     	; 0x1146 <sendPassword+0x86>
		__ticks = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
    1144:	3f c0       	rjmp	.+126    	; 0x11c4 <sendPassword+0x104>
	else if (__tmp > 65535)
    1146:	6f 81       	ldd	r22, Y+7	; 0x07
    1148:	78 85       	ldd	r23, Y+8	; 0x08
    114a:	89 85       	ldd	r24, Y+9	; 0x09
    114c:	9a 85       	ldd	r25, Y+10	; 0x0a
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115a:	18 16       	cp	r1, r24
    115c:	4c f5       	brge	.+82     	; 0x11b0 <sendPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1160:	7c 85       	ldd	r23, Y+12	; 0x0c
    1162:	8d 85       	ldd	r24, Y+13	; 0x0d
    1164:	9e 85       	ldd	r25, Y+14	; 0x0e
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e2       	ldi	r20, 0x20	; 32
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <sendPassword+0xe6>
    1188:	88 ec       	ldi	r24, 0xC8	; 200
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <sendPassword+0xd4>
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	69 f7       	brne	.-38     	; 0x1188 <sendPassword+0xc8>
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <sendPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b0:	6f 81       	ldd	r22, Y+7	; 0x07
    11b2:	78 85       	ldd	r23, Y+8	; 0x08
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <sendPassword+0x110>
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
 * Function to send an array of bytes (a password) through UART to the Control ECU
 * */
void sendPassword(uint8 size, uint8 *password) {
	uint8 i;

	for (i = 0; i < size; i++) {
    11d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	9f 85       	ldd	r25, Y+15	; 0x0f
    11e0:	88 89       	ldd	r24, Y+16	; 0x10
    11e2:	98 17       	cp	r25, r24
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <sendPassword+0x128>
    11e6:	7b cf       	rjmp	.-266    	; 0x10de <sendPassword+0x1e>
		UART_sendByte(password[i]);
		_delay_ms(3);
	}
}
    11e8:	62 96       	adiw	r28, 0x12	; 18
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <displayMainOptions>:

/*
 * Description :
 * Private function to display the main options on an LCD
 * */
static void displayMainOptions(void) {
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("+ : Open Door");
    1202:	8b ea       	ldi	r24, 0xAB	; 171
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    120a:	29 eb       	ldi	r18, 0xB9	; 185
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <takeChoice>:
/*
 * Description :
 * Function to allow the user to choose between opening the door
 * or changing the password based on keypad input
 * */
void takeChoice(void) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	uint8 choice = 0;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <takeChoice+0x14>
	/* Get the pressed key number,
	 * if any switch pressed for more than 250ms it will considered more than one press */
	while (choice != '+' && choice != '-') {
		choice = KEYPAD_getPressedKey();
    122c:	0e 94 66 11 	call	0x22cc	; 0x22cc <KEYPAD_getPressedKey>
    1230:	89 83       	std	Y+1, r24	; 0x01
 * */
void takeChoice(void) {
	uint8 choice = 0;
	/* Get the pressed key number,
	 * if any switch pressed for more than 250ms it will considered more than one press */
	while (choice != '+' && choice != '-') {
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	8b 32       	cpi	r24, 0x2B	; 43
    1236:	19 f0       	breq	.+6      	; 0x123e <takeChoice+0x20>
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8d 32       	cpi	r24, 0x2D	; 45
    123c:	b9 f7       	brne	.-18     	; 0x122c <takeChoice+0xe>
		choice = KEYPAD_getPressedKey();
	}
	if (choice == '+') {
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	8b 32       	cpi	r24, 0x2B	; 43
    1242:	21 f4       	brne	.+8      	; 0x124c <takeChoice+0x2e>
		g_HMI_SYSTEM_SEQUENCE = OPEN_DOOR;
    1244:	84 e0       	ldi	r24, 0x04	; 4
    1246:	80 93 76 01 	sts	0x0176, r24
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <takeChoice+0x3a>
	} else if (choice == '-') {
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	8d 32       	cpi	r24, 0x2D	; 45
    1250:	19 f4       	brne	.+6      	; 0x1258 <takeChoice+0x3a>
		g_HMI_SYSTEM_SEQUENCE = CHANGE_PASSWORD;
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	80 93 76 01 	sts	0x0176, r24
	}
	UART_sendByte(g_HMI_SYSTEM_SEQUENCE);
    1258:	80 91 76 01 	lds	r24, 0x0176
    125c:	0e 94 8c 19 	call	0x3318	; 0x3318 <UART_sendByte>
}
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <enterPassword>:
/*
 * Description :
 * Function allows the user to input the created password
 * sends the password to the Control ECU to check it
 * */
void enterPassword(void) {
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <enterPassword+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <enterPassword+0x8>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	uint8 userPassword[PASSWORD_SIZE];
	LCD_clearScreen();
    1276:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
	LCD_displayString("Enter your saved ");
    127a:	89 ec       	ldi	r24, 0xC9	; 201
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"password:  ");
    1282:	2b ed       	ldi	r18, 0xDB	; 219
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	a9 01       	movw	r20, r18
    128c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
	fillPasswordArray(PASSWORD_SIZE, userPassword);
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	9e 01       	movw	r18, r28
    1294:	2f 5f       	subi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	b9 01       	movw	r22, r18
    129a:	0e 94 a3 05 	call	0xb46	; 0xb46 <fillPasswordArray>
	while (UART_receiveByte() != MC1_READY) {
    129e:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    12a2:	80 31       	cpi	r24, 0x10	; 16
    12a4:	e1 f7       	brne	.-8      	; 0x129e <enterPassword+0x36>
	};
	sendPassword(PASSWORD_SIZE, userPassword);
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	9e 01       	movw	r18, r28
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	b9 01       	movw	r22, r18
    12b0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <sendPassword>
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <controlMessageTime>:
/* Description :
 * Callback function for timer1 to control the LCD messages displaying time
 */
void controlMessageTime(void) {
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    12cc:	80 91 96 01 	lds	r24, 0x0196
    12d0:	8f 5f       	subi	r24, 0xFF	; 255
    12d2:	80 93 96 01 	sts	0x0196, r24
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <displayError>:
/*
 * Description :
 * Function to display an error message for 1 Minute
 * */
void displayError(void) {
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	2b 97       	sbiw	r28, 0x0b	; 11
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
	 * 60/8 = Compare Value * 128usec
	 * Compare Value = 7.5/128usec = 58594
	 * Compare Value = 58594
	 */
	Timer1_ConfigType TimerConfiguration =
	{ 0, 58594, PRESCALER_1024, CTC_MODE };
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	98 87       	std	Y+8, r25	; 0x08
    12f6:	8f 83       	std	Y+7, r24	; 0x07
    12f8:	e7 e7       	ldi	r30, 0x77	; 119
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	fa 87       	std	Y+10, r31	; 0x0a
    12fe:	e9 87       	std	Y+9, r30	; 0x09
    1300:	f6 e0       	ldi	r31, 0x06	; 6
    1302:	fb 87       	std	Y+11, r31	; 0x0b
    1304:	e9 85       	ldd	r30, Y+9	; 0x09
    1306:	fa 85       	ldd	r31, Y+10	; 0x0a
    1308:	00 80       	ld	r0, Z
    130a:	89 85       	ldd	r24, Y+9	; 0x09
    130c:	9a 85       	ldd	r25, Y+10	; 0x0a
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	9a 87       	std	Y+10, r25	; 0x0a
    1312:	89 87       	std	Y+9, r24	; 0x09
    1314:	ef 81       	ldd	r30, Y+7	; 0x07
    1316:	f8 85       	ldd	r31, Y+8	; 0x08
    1318:	00 82       	st	Z, r0
    131a:	8f 81       	ldd	r24, Y+7	; 0x07
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	98 87       	std	Y+8, r25	; 0x08
    1322:	8f 83       	std	Y+7, r24	; 0x07
    1324:	9b 85       	ldd	r25, Y+11	; 0x0b
    1326:	91 50       	subi	r25, 0x01	; 1
    1328:	9b 87       	std	Y+11, r25	; 0x0b
    132a:	eb 85       	ldd	r30, Y+11	; 0x0b
    132c:	ee 23       	and	r30, r30
    132e:	51 f7       	brne	.-44     	; 0x1304 <displayError+0x28>
	Timer1_setCallBack(controlMessageTime);
    1330:	82 e6       	ldi	r24, 0x62	; 98
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	0e 94 09 19 	call	0x3212	; 0x3212 <Timer1_setCallBack>
	Timer1_init(&TimerConfiguration);
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 82 18 	call	0x3104	; 0x3104 <Timer1_init>
	while (g_tick < 8) {};
    1340:	80 91 96 01 	lds	r24, 0x0196
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	e0 f3       	brcs	.-8      	; 0x1340 <displayError+0x64>
	g_tick = 0; /* Reset the interrupts counter */
    1348:	10 92 96 01 	sts	0x0196, r1
	Timer1_deInit(); /* Reset timer1 registers */
    134c:	0e 94 ed 18 	call	0x31da	; 0x31da <Timer1_deInit>

	/*Go to Main Options again*/
	LCD_clearScreen();
    1350:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
}
    1354:	2b 96       	adiw	r28, 0x0b	; 11
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <main>:
/*******************************************************************************
 *                          MAIN FUNCTION                                      *
 *******************************************************************************/

int main(void) {
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	c6 57       	subi	r28, 0x76	; 118
    1374:	d0 40       	sbci	r29, 0x00	; 0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	/*Variable to count the number of consecutive failures of entering the password*/
	uint8 failuresCounter = 0;
    1380:	fe 01       	movw	r30, r28
    1382:	e9 5b       	subi	r30, 0xB9	; 185
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	10 82       	st	Z, r1
	/* Enable Global Interrupt */
	SREG |= (1 << 7);
    1388:	af e5       	ldi	r26, 0x5F	; 95
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ef e5       	ldi	r30, 0x5F	; 95
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 68       	ori	r24, 0x80	; 128
    1394:	8c 93       	st	X, r24
	/* LCD Initialization */
	LCD_init();
    1396:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <LCD_init>

	/* Welcome Message */
	LCD_displayString("Door Locker");
    139a:	87 ee       	ldi	r24, 0xE7	; 231
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "Security System");
    13a2:	23 ef       	ldi	r18, 0xF3	; 243
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
    13b0:	fe 01       	movw	r30, r28
    13b2:	ed 5b       	subi	r30, 0xBD	; 189
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	aa e7       	ldi	r26, 0x7A	; 122
    13bc:	b4 e4       	ldi	r27, 0x44	; 68
    13be:	80 83       	st	Z, r24
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	a2 83       	std	Z+2, r26	; 0x02
    13c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	8e 01       	movw	r16, r28
    13c8:	01 5c       	subi	r16, 0xC1	; 193
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 5b       	subi	r30, 0xBD	; 189
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f4:	fe 01       	movw	r30, r28
    13f6:	ff 96       	adiw	r30, 0x3f	; 63
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <main+0xb4>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e af       	std	Y+62, r25	; 0x3e
    1416:	8d af       	std	Y+61, r24	; 0x3d
    1418:	46 c0       	rjmp	.+140    	; 0x14a6 <main+0x140>
	else if (__tmp > 65535)
    141a:	fe 01       	movw	r30, r28
    141c:	ff 96       	adiw	r30, 0x3f	; 63
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	64 f5       	brge	.+88     	; 0x148e <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	fe 01       	movw	r30, r28
    1438:	ed 5b       	subi	r30, 0xBD	; 189
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9e af       	std	Y+62, r25	; 0x3e
    1462:	8d af       	std	Y+61, r24	; 0x3d
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <main+0x11e>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c af       	std	Y+60, r25	; 0x3c
    146c:	8b af       	std	Y+59, r24	; 0x3b
    146e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1470:	9c ad       	ldd	r25, Y+60	; 0x3c
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <main+0x10c>
    1476:	9c af       	std	Y+60, r25	; 0x3c
    1478:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8d ad       	ldd	r24, Y+61	; 0x3d
    147c:	9e ad       	ldd	r25, Y+62	; 0x3e
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9e af       	std	Y+62, r25	; 0x3e
    1482:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8d ad       	ldd	r24, Y+61	; 0x3d
    1486:	9e ad       	ldd	r25, Y+62	; 0x3e
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <main+0x100>
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	fe 01       	movw	r30, r28
    1490:	ff 96       	adiw	r30, 0x3f	; 63
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9e af       	std	Y+62, r25	; 0x3e
    14a4:	8d af       	std	Y+61, r24	; 0x3d
    14a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    14a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    14aa:	9a af       	std	Y+58, r25	; 0x3a
    14ac:	89 af       	std	Y+57, r24	; 0x39
    14ae:	89 ad       	ldd	r24, Y+57	; 0x39
    14b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <main+0x14c>
    14b6:	9a af       	std	Y+58, r25	; 0x3a
    14b8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_clearScreen();
    14ba:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>

	/* UART Configuration */
	UART_ConfigType UART_Configuration = { EIGHT_BITS_DATA, DISABLED,
			ONE_STOP_BIT, BAUD_RATE_9600_BPS };
    14be:	ce 01       	movw	r24, r28
    14c0:	88 5b       	subi	r24, 0xB8	; 184
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	a5 96       	adiw	r28, 0x25	; 37
    14c6:	9f af       	std	Y+63, r25	; 0x3f
    14c8:	8e af       	std	Y+62, r24	; 0x3e
    14ca:	a5 97       	sbiw	r28, 0x25	; 37
    14cc:	2f e8       	ldi	r18, 0x8F	; 143
    14ce:	31 e0       	ldi	r19, 0x01	; 1
    14d0:	a7 96       	adiw	r28, 0x27	; 39
    14d2:	3f af       	std	Y+63, r19	; 0x3f
    14d4:	2e af       	std	Y+62, r18	; 0x3e
    14d6:	a7 97       	sbiw	r28, 0x27	; 39
    14d8:	37 e0       	ldi	r19, 0x07	; 7
    14da:	a8 96       	adiw	r28, 0x28	; 40
    14dc:	3f af       	std	Y+63, r19	; 0x3f
    14de:	a8 97       	sbiw	r28, 0x28	; 40
    14e0:	a7 96       	adiw	r28, 0x27	; 39
    14e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    14e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    14e6:	a7 97       	sbiw	r28, 0x27	; 39
    14e8:	00 80       	ld	r0, Z
    14ea:	a7 96       	adiw	r28, 0x27	; 39
    14ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    14ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    14f0:	a7 97       	sbiw	r28, 0x27	; 39
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	a7 96       	adiw	r28, 0x27	; 39
    14f8:	3f af       	std	Y+63, r19	; 0x3f
    14fa:	2e af       	std	Y+62, r18	; 0x3e
    14fc:	a7 97       	sbiw	r28, 0x27	; 39
    14fe:	a5 96       	adiw	r28, 0x25	; 37
    1500:	ee ad       	ldd	r30, Y+62	; 0x3e
    1502:	ff ad       	ldd	r31, Y+63	; 0x3f
    1504:	a5 97       	sbiw	r28, 0x25	; 37
    1506:	00 82       	st	Z, r0
    1508:	a5 96       	adiw	r28, 0x25	; 37
    150a:	2e ad       	ldd	r18, Y+62	; 0x3e
    150c:	3f ad       	ldd	r19, Y+63	; 0x3f
    150e:	a5 97       	sbiw	r28, 0x25	; 37
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	a5 96       	adiw	r28, 0x25	; 37
    1516:	3f af       	std	Y+63, r19	; 0x3f
    1518:	2e af       	std	Y+62, r18	; 0x3e
    151a:	a5 97       	sbiw	r28, 0x25	; 37
    151c:	a8 96       	adiw	r28, 0x28	; 40
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	a8 97       	sbiw	r28, 0x28	; 40
    1522:	31 50       	subi	r19, 0x01	; 1
    1524:	a8 96       	adiw	r28, 0x28	; 40
    1526:	3f af       	std	Y+63, r19	; 0x3f
    1528:	a8 97       	sbiw	r28, 0x28	; 40
    152a:	a8 96       	adiw	r28, 0x28	; 40
    152c:	8f ad       	ldd	r24, Y+63	; 0x3f
    152e:	a8 97       	sbiw	r28, 0x28	; 40
    1530:	88 23       	and	r24, r24
    1532:	b1 f6       	brne	.-84     	; 0x14e0 <main+0x17a>
	/* UART Initialization */
	UART_init(&UART_Configuration);
    1534:	ce 01       	movw	r24, r28
    1536:	88 5b       	subi	r24, 0xB8	; 184
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	0e 94 1b 19 	call	0x3236	; 0x3236 <UART_init>

	while (1) {
		switch (g_HMI_SYSTEM_SEQUENCE) {
    153e:	80 91 76 01 	lds	r24, 0x0176
    1542:	e8 2f       	mov	r30, r24
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	a3 96       	adiw	r28, 0x23	; 35
    1548:	ff af       	std	Y+63, r31	; 0x3f
    154a:	ee af       	std	Y+62, r30	; 0x3e
    154c:	a3 97       	sbiw	r28, 0x23	; 35
    154e:	a3 96       	adiw	r28, 0x23	; 35
    1550:	2e ad       	ldd	r18, Y+62	; 0x3e
    1552:	3f ad       	ldd	r19, Y+63	; 0x3f
    1554:	a3 97       	sbiw	r28, 0x23	; 35
    1556:	23 30       	cpi	r18, 0x03	; 3
    1558:	31 05       	cpc	r19, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <main+0x1f8>
    155c:	ae c0       	rjmp	.+348    	; 0x16ba <main+0x354>
    155e:	a3 96       	adiw	r28, 0x23	; 35
    1560:	8e ad       	ldd	r24, Y+62	; 0x3e
    1562:	9f ad       	ldd	r25, Y+63	; 0x3f
    1564:	a3 97       	sbiw	r28, 0x23	; 35
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	91 05       	cpc	r25, r1
    156a:	44 f4       	brge	.+16     	; 0x157c <main+0x216>
    156c:	a3 96       	adiw	r28, 0x23	; 35
    156e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1570:	ff ad       	ldd	r31, Y+63	; 0x3f
    1572:	a3 97       	sbiw	r28, 0x23	; 35
    1574:	e2 30       	cpi	r30, 0x02	; 2
    1576:	f1 05       	cpc	r31, r1
    1578:	91 f0       	breq	.+36     	; 0x159e <main+0x238>
    157a:	e1 cf       	rjmp	.-62     	; 0x153e <main+0x1d8>
    157c:	a3 96       	adiw	r28, 0x23	; 35
    157e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1580:	3f ad       	ldd	r19, Y+63	; 0x3f
    1582:	a3 97       	sbiw	r28, 0x23	; 35
    1584:	24 30       	cpi	r18, 0x04	; 4
    1586:	31 05       	cpc	r19, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <main+0x226>
    158a:	9c c0       	rjmp	.+312    	; 0x16c4 <main+0x35e>
    158c:	a3 96       	adiw	r28, 0x23	; 35
    158e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1590:	9f ad       	ldd	r25, Y+63	; 0x3f
    1592:	a3 97       	sbiw	r28, 0x23	; 35
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <main+0x236>
    159a:	3e c2       	rjmp	.+1148   	; 0x1a18 <main+0x6b2>
    159c:	d0 cf       	rjmp	.-96     	; 0x153e <main+0x1d8>
			 * and sends them through UART to the Control ECU for comparison
			 * if they matched, the Control ECU will save it in the EEPROM
			 * if they not matched, the HMI ECU keep asking the user to create new password
			 * */
			do {
				createPassword();
    159e:	0e 94 39 07 	call	0xe72	; 0xe72 <createPassword>
				sendPassword(PASSWORD_SIZE, g_password1);
    15a2:	27 e9       	ldi	r18, 0x97	; 151
    15a4:	31 e0       	ldi	r19, 0x01	; 1
    15a6:	85 e0       	ldi	r24, 0x05	; 5
    15a8:	b9 01       	movw	r22, r18
    15aa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <sendPassword>
				sendPassword(PASSWORD_SIZE, g_password2);
    15ae:	2c e9       	ldi	r18, 0x9C	; 156
    15b0:	31 e0       	ldi	r19, 0x01	; 1
    15b2:	85 e0       	ldi	r24, 0x05	; 5
    15b4:	b9 01       	movw	r22, r18
    15b6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <sendPassword>
			} while (UART_receiveByte() != PASSWORDS_MATCHED);
    15ba:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	71 f7       	brne	.-36     	; 0x159e <main+0x238>
			LCD_displayString("PASSWORD SAVED!");
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	aa ef       	ldi	r26, 0xFA	; 250
    15d0:	b3 e4       	ldi	r27, 0x43	; 67
    15d2:	8d ab       	std	Y+53, r24	; 0x35
    15d4:	9e ab       	std	Y+54, r25	; 0x36
    15d6:	af ab       	std	Y+55, r26	; 0x37
    15d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	6d a9       	ldd	r22, Y+53	; 0x35
    15dc:	7e a9       	ldd	r23, Y+54	; 0x36
    15de:	8f a9       	ldd	r24, Y+55	; 0x37
    15e0:	98 ad       	ldd	r25, Y+56	; 0x38
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a ef       	ldi	r20, 0xFA	; 250
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	89 ab       	std	Y+49, r24	; 0x31
    15f4:	9a ab       	std	Y+50, r25	; 0x32
    15f6:	ab ab       	std	Y+51, r26	; 0x33
    15f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15fa:	69 a9       	ldd	r22, Y+49	; 0x31
    15fc:	7a a9       	ldd	r23, Y+50	; 0x32
    15fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1600:	9c a9       	ldd	r25, Y+52	; 0x34
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <main+0x2b6>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	98 ab       	std	Y+48, r25	; 0x30
    1618:	8f a7       	std	Y+47, r24	; 0x2f
    161a:	3f c0       	rjmp	.+126    	; 0x169a <main+0x334>
	else if (__tmp > 65535)
    161c:	69 a9       	ldd	r22, Y+49	; 0x31
    161e:	7a a9       	ldd	r23, Y+50	; 0x32
    1620:	8b a9       	ldd	r24, Y+51	; 0x33
    1622:	9c a9       	ldd	r25, Y+52	; 0x34
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	4c f5       	brge	.+82     	; 0x1686 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	6d a9       	ldd	r22, Y+53	; 0x35
    1636:	7e a9       	ldd	r23, Y+54	; 0x36
    1638:	8f a9       	ldd	r24, Y+55	; 0x37
    163a:	98 ad       	ldd	r25, Y+56	; 0x38
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	98 ab       	std	Y+48, r25	; 0x30
    165a:	8f a7       	std	Y+47, r24	; 0x2f
    165c:	0f c0       	rjmp	.+30     	; 0x167c <main+0x316>
    165e:	88 ec       	ldi	r24, 0xC8	; 200
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e a7       	std	Y+46, r25	; 0x2e
    1664:	8d a7       	std	Y+45, r24	; 0x2d
    1666:	8d a5       	ldd	r24, Y+45	; 0x2d
    1668:	9e a5       	ldd	r25, Y+46	; 0x2e
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <main+0x304>
    166e:	9e a7       	std	Y+46, r25	; 0x2e
    1670:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	8f a5       	ldd	r24, Y+47	; 0x2f
    1674:	98 a9       	ldd	r25, Y+48	; 0x30
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	98 ab       	std	Y+48, r25	; 0x30
    167a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	8f a5       	ldd	r24, Y+47	; 0x2f
    167e:	98 a9       	ldd	r25, Y+48	; 0x30
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	69 f7       	brne	.-38     	; 0x165e <main+0x2f8>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	69 a9       	ldd	r22, Y+49	; 0x31
    1688:	7a a9       	ldd	r23, Y+50	; 0x32
    168a:	8b a9       	ldd	r24, Y+51	; 0x33
    168c:	9c a9       	ldd	r25, Y+52	; 0x34
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	98 ab       	std	Y+48, r25	; 0x30
    1698:	8f a7       	std	Y+47, r24	; 0x2f
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	98 a9       	ldd	r25, Y+48	; 0x30
    169e:	9c a7       	std	Y+44, r25	; 0x2c
    16a0:	8b a7       	std	Y+43, r24	; 0x2b
    16a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <main+0x340>
    16aa:	9c a7       	std	Y+44, r25	; 0x2c
    16ac:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			LCD_clearScreen();
    16ae:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			g_HMI_SYSTEM_SEQUENCE = MAIN_OPTIONS;
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	80 93 76 01 	sts	0x0176, r24
    16b8:	42 cf       	rjmp	.-380    	; 0x153e <main+0x1d8>
			break;
		case MAIN_OPTIONS:
			displayMainOptions();
    16ba:	0e 94 fd 08 	call	0x11fa	; 0x11fa <displayMainOptions>
			takeChoice(); /*That choice determines the next state of the system*/
    16be:	0e 94 0f 09 	call	0x121e	; 0x121e <takeChoice>
    16c2:	3d cf       	rjmp	.-390    	; 0x153e <main+0x1d8>
			break;
		case OPEN_DOOR:
			do {
				if (failuresCounter < NUMBER_OF_CONSECUTIVE_FAILURES) {
    16c4:	fe 01       	movw	r30, r28
    16c6:	e9 5b       	subi	r30, 0xB9	; 185
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <main+0x36c>
    16d0:	7e c0       	rjmp	.+252    	; 0x17ce <main+0x468>
					enterPassword();
    16d2:	0e 94 34 09 	call	0x1268	; 0x1268 <enterPassword>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e2       	ldi	r26, 0x20	; 32
    16dc:	b1 e4       	ldi	r27, 0x41	; 65
    16de:	8f a3       	std	Y+39, r24	; 0x27
    16e0:	98 a7       	std	Y+40, r25	; 0x28
    16e2:	a9 a7       	std	Y+41, r26	; 0x29
    16e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6f a1       	ldd	r22, Y+39	; 0x27
    16e8:	78 a5       	ldd	r23, Y+40	; 0x28
    16ea:	89 a5       	ldd	r24, Y+41	; 0x29
    16ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8b a3       	std	Y+35, r24	; 0x23
    1700:	9c a3       	std	Y+36, r25	; 0x24
    1702:	ad a3       	std	Y+37, r26	; 0x25
    1704:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1706:	6b a1       	ldd	r22, Y+35	; 0x23
    1708:	7c a1       	ldd	r23, Y+36	; 0x24
    170a:	8d a1       	ldd	r24, Y+37	; 0x25
    170c:	9e a1       	ldd	r25, Y+38	; 0x26
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <main+0x3c2>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9a a3       	std	Y+34, r25	; 0x22
    1724:	89 a3       	std	Y+33, r24	; 0x21
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <main+0x440>
	else if (__tmp > 65535)
    1728:	6b a1       	ldd	r22, Y+35	; 0x23
    172a:	7c a1       	ldd	r23, Y+36	; 0x24
    172c:	8d a1       	ldd	r24, Y+37	; 0x25
    172e:	9e a1       	ldd	r25, Y+38	; 0x26
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <main+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6f a1       	ldd	r22, Y+39	; 0x27
    1742:	78 a5       	ldd	r23, Y+40	; 0x28
    1744:	89 a5       	ldd	r24, Y+41	; 0x29
    1746:	9a a5       	ldd	r25, Y+42	; 0x2a
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9a a3       	std	Y+34, r25	; 0x22
    1766:	89 a3       	std	Y+33, r24	; 0x21
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <main+0x422>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	98 a3       	std	Y+32, r25	; 0x20
    1770:	8f 8f       	std	Y+31, r24	; 0x1f
    1772:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1774:	98 a1       	ldd	r25, Y+32	; 0x20
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <main+0x410>
    177a:	98 a3       	std	Y+32, r25	; 0x20
    177c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	89 a1       	ldd	r24, Y+33	; 0x21
    1780:	9a a1       	ldd	r25, Y+34	; 0x22
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9a a3       	std	Y+34, r25	; 0x22
    1786:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	89 a1       	ldd	r24, Y+33	; 0x21
    178a:	9a a1       	ldd	r25, Y+34	; 0x22
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <main+0x404>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <main+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6b a1       	ldd	r22, Y+35	; 0x23
    1794:	7c a1       	ldd	r23, Y+36	; 0x24
    1796:	8d a1       	ldd	r24, Y+37	; 0x25
    1798:	9e a1       	ldd	r25, Y+38	; 0x26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9a a3       	std	Y+34, r25	; 0x22
    17a4:	89 a3       	std	Y+33, r24	; 0x21
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	9e 8f       	std	Y+30, r25	; 0x1e
    17ac:	8d 8f       	std	Y+29, r24	; 0x1d
    17ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <main+0x44c>
    17b6:	9e 8f       	std	Y+30, r25	; 0x1e
    17b8:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(10);
					failuresCounter++;
    17ba:	de 01       	movw	r26, r28
    17bc:	a9 5b       	subi	r26, 0xB9	; 185
    17be:	bf 4f       	sbci	r27, 0xFF	; 255
    17c0:	fe 01       	movw	r30, r28
    17c2:	e9 5b       	subi	r30, 0xB9	; 185
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8c 93       	st	X, r24
    17cc:	12 c0       	rjmp	.+36     	; 0x17f2 <main+0x48c>
				} else {
					/* ERROR Message */
					LCD_displayString("ERROR!! YOU ARE");
    17ce:	83 e1       	ldi	r24, 0x13	; 19
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "NOT AUTHORIZED");
    17d6:	23 e2       	ldi	r18, 0x23	; 35
    17d8:	31 e0       	ldi	r19, 0x01	; 1
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
					displayError();
    17e4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <displayError>
					LCD_clearScreen();
    17e8:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
					/*Return to the main options after error occurs*/
					g_HMI_SYSTEM_SEQUENCE = MAIN_OPTIONS;
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	80 93 76 01 	sts	0x0176, r24
				}
			} while (UART_receiveByte() != PASSWORDS_MATCHED);
    17f2:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <main+0x496>
    17fa:	64 cf       	rjmp	.-312    	; 0x16c4 <main+0x35e>
			failuresCounter=0;
    17fc:	fe 01       	movw	r30, r28
    17fe:	e9 5b       	subi	r30, 0xB9	; 185
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	10 82       	st	Z, r1
			 * 15/2 = Compare Value * 128usec
			 * Compare Value = 7.5/128usec = 58594
			 * Compare Value = 58594
			 * */
			Timer1_ConfigType TimerConfiguration1 = { 0, 58594, PRESCALER_1024,
					CTC_MODE };
    1804:	ce 01       	movw	r24, r28
    1806:	81 5b       	subi	r24, 0xB1	; 177
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	aa 96       	adiw	r28, 0x2a	; 42
    180c:	9f af       	std	Y+63, r25	; 0x3f
    180e:	8e af       	std	Y+62, r24	; 0x3e
    1810:	aa 97       	sbiw	r28, 0x2a	; 42
    1812:	e9 e8       	ldi	r30, 0x89	; 137
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	ac 96       	adiw	r28, 0x2c	; 44
    1818:	ff af       	std	Y+63, r31	; 0x3f
    181a:	ee af       	std	Y+62, r30	; 0x3e
    181c:	ac 97       	sbiw	r28, 0x2c	; 44
    181e:	f6 e0       	ldi	r31, 0x06	; 6
    1820:	ad 96       	adiw	r28, 0x2d	; 45
    1822:	ff af       	std	Y+63, r31	; 0x3f
    1824:	ad 97       	sbiw	r28, 0x2d	; 45
    1826:	ac 96       	adiw	r28, 0x2c	; 44
    1828:	ee ad       	ldd	r30, Y+62	; 0x3e
    182a:	ff ad       	ldd	r31, Y+63	; 0x3f
    182c:	ac 97       	sbiw	r28, 0x2c	; 44
    182e:	00 80       	ld	r0, Z
    1830:	ac 96       	adiw	r28, 0x2c	; 44
    1832:	2e ad       	ldd	r18, Y+62	; 0x3e
    1834:	3f ad       	ldd	r19, Y+63	; 0x3f
    1836:	ac 97       	sbiw	r28, 0x2c	; 44
    1838:	2f 5f       	subi	r18, 0xFF	; 255
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	ac 96       	adiw	r28, 0x2c	; 44
    183e:	3f af       	std	Y+63, r19	; 0x3f
    1840:	2e af       	std	Y+62, r18	; 0x3e
    1842:	ac 97       	sbiw	r28, 0x2c	; 44
    1844:	aa 96       	adiw	r28, 0x2a	; 42
    1846:	ee ad       	ldd	r30, Y+62	; 0x3e
    1848:	ff ad       	ldd	r31, Y+63	; 0x3f
    184a:	aa 97       	sbiw	r28, 0x2a	; 42
    184c:	00 82       	st	Z, r0
    184e:	aa 96       	adiw	r28, 0x2a	; 42
    1850:	2e ad       	ldd	r18, Y+62	; 0x3e
    1852:	3f ad       	ldd	r19, Y+63	; 0x3f
    1854:	aa 97       	sbiw	r28, 0x2a	; 42
    1856:	2f 5f       	subi	r18, 0xFF	; 255
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	aa 96       	adiw	r28, 0x2a	; 42
    185c:	3f af       	std	Y+63, r19	; 0x3f
    185e:	2e af       	std	Y+62, r18	; 0x3e
    1860:	aa 97       	sbiw	r28, 0x2a	; 42
    1862:	ad 96       	adiw	r28, 0x2d	; 45
    1864:	3f ad       	ldd	r19, Y+63	; 0x3f
    1866:	ad 97       	sbiw	r28, 0x2d	; 45
    1868:	31 50       	subi	r19, 0x01	; 1
    186a:	ad 96       	adiw	r28, 0x2d	; 45
    186c:	3f af       	std	Y+63, r19	; 0x3f
    186e:	ad 97       	sbiw	r28, 0x2d	; 45
    1870:	ad 96       	adiw	r28, 0x2d	; 45
    1872:	8f ad       	ldd	r24, Y+63	; 0x3f
    1874:	ad 97       	sbiw	r28, 0x2d	; 45
    1876:	88 23       	and	r24, r24
    1878:	b1 f6       	brne	.-84     	; 0x1826 <main+0x4c0>
			Timer1_setCallBack(controlMessageTime);
    187a:	82 e6       	ldi	r24, 0x62	; 98
    187c:	99 e0       	ldi	r25, 0x09	; 9
    187e:	0e 94 09 19 	call	0x3212	; 0x3212 <Timer1_setCallBack>
			Timer1_init(&TimerConfiguration1);
    1882:	ce 01       	movw	r24, r28
    1884:	81 5b       	subi	r24, 0xB1	; 177
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	0e 94 82 18 	call	0x3104	; 0x3104 <Timer1_init>

			LCD_clearScreen();
    188c:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			LCD_displayString("Door is");
    1890:	82 e3       	ldi	r24, 0x32	; 50
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Unlocking..");
    1898:	2a e3       	ldi	r18, 0x3A	; 58
    189a:	31 e0       	ldi	r19, 0x01	; 1
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>

			while (g_tick < 2){};
    18a6:	80 91 96 01 	lds	r24, 0x0196
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	e0 f3       	brcs	.-8      	; 0x18a6 <main+0x540>
			g_tick = 0; /*Reset the interrupts counter*/
    18ae:	10 92 96 01 	sts	0x0196, r1
			Timer1_deInit(); /* Reset timer1 registers*/
    18b2:	0e 94 ed 18 	call	0x31da	; 0x31da <Timer1_deInit>
			/*For holding the door 3 seconds, we need to re-configure Timer1
			 * Compare Value = 23438*/

			Timer1_ConfigType TimerConfiguration2 = { 0, 23438, PRESCALER_1024,
					CTC_MODE };
    18b6:	ce 01       	movw	r24, r28
    18b8:	8b 5a       	subi	r24, 0xAB	; 171
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	af 96       	adiw	r28, 0x2f	; 47
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	8e af       	std	Y+62, r24	; 0x3e
    18c2:	af 97       	sbiw	r28, 0x2f	; 47
    18c4:	e3 e8       	ldi	r30, 0x83	; 131
    18c6:	f1 e0       	ldi	r31, 0x01	; 1
    18c8:	e1 96       	adiw	r28, 0x31	; 49
    18ca:	ff af       	std	Y+63, r31	; 0x3f
    18cc:	ee af       	std	Y+62, r30	; 0x3e
    18ce:	e1 97       	sbiw	r28, 0x31	; 49
    18d0:	f6 e0       	ldi	r31, 0x06	; 6
    18d2:	e2 96       	adiw	r28, 0x32	; 50
    18d4:	ff af       	std	Y+63, r31	; 0x3f
    18d6:	e2 97       	sbiw	r28, 0x32	; 50
    18d8:	e1 96       	adiw	r28, 0x31	; 49
    18da:	ee ad       	ldd	r30, Y+62	; 0x3e
    18dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    18de:	e1 97       	sbiw	r28, 0x31	; 49
    18e0:	00 80       	ld	r0, Z
    18e2:	e1 96       	adiw	r28, 0x31	; 49
    18e4:	2e ad       	ldd	r18, Y+62	; 0x3e
    18e6:	3f ad       	ldd	r19, Y+63	; 0x3f
    18e8:	e1 97       	sbiw	r28, 0x31	; 49
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	e1 96       	adiw	r28, 0x31	; 49
    18f0:	3f af       	std	Y+63, r19	; 0x3f
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	e1 97       	sbiw	r28, 0x31	; 49
    18f6:	af 96       	adiw	r28, 0x2f	; 47
    18f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    18fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    18fc:	af 97       	sbiw	r28, 0x2f	; 47
    18fe:	00 82       	st	Z, r0
    1900:	af 96       	adiw	r28, 0x2f	; 47
    1902:	2e ad       	ldd	r18, Y+62	; 0x3e
    1904:	3f ad       	ldd	r19, Y+63	; 0x3f
    1906:	af 97       	sbiw	r28, 0x2f	; 47
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	af 96       	adiw	r28, 0x2f	; 47
    190e:	3f af       	std	Y+63, r19	; 0x3f
    1910:	2e af       	std	Y+62, r18	; 0x3e
    1912:	af 97       	sbiw	r28, 0x2f	; 47
    1914:	e2 96       	adiw	r28, 0x32	; 50
    1916:	3f ad       	ldd	r19, Y+63	; 0x3f
    1918:	e2 97       	sbiw	r28, 0x32	; 50
    191a:	31 50       	subi	r19, 0x01	; 1
    191c:	e2 96       	adiw	r28, 0x32	; 50
    191e:	3f af       	std	Y+63, r19	; 0x3f
    1920:	e2 97       	sbiw	r28, 0x32	; 50
    1922:	e2 96       	adiw	r28, 0x32	; 50
    1924:	8f ad       	ldd	r24, Y+63	; 0x3f
    1926:	e2 97       	sbiw	r28, 0x32	; 50
    1928:	88 23       	and	r24, r24
    192a:	b1 f6       	brne	.-84     	; 0x18d8 <main+0x572>
			Timer1_setCallBack(controlMessageTime);
    192c:	82 e6       	ldi	r24, 0x62	; 98
    192e:	99 e0       	ldi	r25, 0x09	; 9
    1930:	0e 94 09 19 	call	0x3212	; 0x3212 <Timer1_setCallBack>
			Timer1_init(&TimerConfiguration2);
    1934:	ce 01       	movw	r24, r28
    1936:	8b 5a       	subi	r24, 0xAB	; 171
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	0e 94 82 18 	call	0x3104	; 0x3104 <Timer1_init>

			LCD_clearScreen();
    193e:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			LCD_displayString("Welcome Back!");
    1942:	86 e4       	ldi	r24, 0x46	; 70
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>

			while (g_tick < 1){};
    194a:	80 91 96 01 	lds	r24, 0x0196
    194e:	88 23       	and	r24, r24
    1950:	e1 f3       	breq	.-8      	; 0x194a <main+0x5e4>
			g_tick = 0; /*Reset the interrupts counter*/
    1952:	10 92 96 01 	sts	0x0196, r1
			Timer1_deInit(); /*Reset timer1 registers*/
    1956:	0e 94 ed 18 	call	0x31da	; 0x31da <Timer1_deInit>

			/*We need to reconfigure timer1 to wait 15 seconds door locking time*/
			Timer1_ConfigType TimerConfiguration3 = { 0, 58594, PRESCALER_1024,
					CTC_MODE };
    195a:	ce 01       	movw	r24, r28
    195c:	85 5a       	subi	r24, 0xA5	; 165
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	e4 96       	adiw	r28, 0x34	; 52
    1962:	9f af       	std	Y+63, r25	; 0x3f
    1964:	8e af       	std	Y+62, r24	; 0x3e
    1966:	e4 97       	sbiw	r28, 0x34	; 52
    1968:	ed e7       	ldi	r30, 0x7D	; 125
    196a:	f1 e0       	ldi	r31, 0x01	; 1
    196c:	e6 96       	adiw	r28, 0x36	; 54
    196e:	ff af       	std	Y+63, r31	; 0x3f
    1970:	ee af       	std	Y+62, r30	; 0x3e
    1972:	e6 97       	sbiw	r28, 0x36	; 54
    1974:	f6 e0       	ldi	r31, 0x06	; 6
    1976:	e7 96       	adiw	r28, 0x37	; 55
    1978:	ff af       	std	Y+63, r31	; 0x3f
    197a:	e7 97       	sbiw	r28, 0x37	; 55
    197c:	e6 96       	adiw	r28, 0x36	; 54
    197e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1980:	ff ad       	ldd	r31, Y+63	; 0x3f
    1982:	e6 97       	sbiw	r28, 0x36	; 54
    1984:	00 80       	ld	r0, Z
    1986:	e6 96       	adiw	r28, 0x36	; 54
    1988:	2e ad       	ldd	r18, Y+62	; 0x3e
    198a:	3f ad       	ldd	r19, Y+63	; 0x3f
    198c:	e6 97       	sbiw	r28, 0x36	; 54
    198e:	2f 5f       	subi	r18, 0xFF	; 255
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	e6 96       	adiw	r28, 0x36	; 54
    1994:	3f af       	std	Y+63, r19	; 0x3f
    1996:	2e af       	std	Y+62, r18	; 0x3e
    1998:	e6 97       	sbiw	r28, 0x36	; 54
    199a:	e4 96       	adiw	r28, 0x34	; 52
    199c:	ee ad       	ldd	r30, Y+62	; 0x3e
    199e:	ff ad       	ldd	r31, Y+63	; 0x3f
    19a0:	e4 97       	sbiw	r28, 0x34	; 52
    19a2:	00 82       	st	Z, r0
    19a4:	e4 96       	adiw	r28, 0x34	; 52
    19a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    19a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    19aa:	e4 97       	sbiw	r28, 0x34	; 52
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	e4 96       	adiw	r28, 0x34	; 52
    19b2:	3f af       	std	Y+63, r19	; 0x3f
    19b4:	2e af       	std	Y+62, r18	; 0x3e
    19b6:	e4 97       	sbiw	r28, 0x34	; 52
    19b8:	e7 96       	adiw	r28, 0x37	; 55
    19ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    19bc:	e7 97       	sbiw	r28, 0x37	; 55
    19be:	31 50       	subi	r19, 0x01	; 1
    19c0:	e7 96       	adiw	r28, 0x37	; 55
    19c2:	3f af       	std	Y+63, r19	; 0x3f
    19c4:	e7 97       	sbiw	r28, 0x37	; 55
    19c6:	e7 96       	adiw	r28, 0x37	; 55
    19c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    19ca:	e7 97       	sbiw	r28, 0x37	; 55
    19cc:	88 23       	and	r24, r24
    19ce:	b1 f6       	brne	.-84     	; 0x197c <main+0x616>
			Timer1_setCallBack(controlMessageTime);
    19d0:	82 e6       	ldi	r24, 0x62	; 98
    19d2:	99 e0       	ldi	r25, 0x09	; 9
    19d4:	0e 94 09 19 	call	0x3212	; 0x3212 <Timer1_setCallBack>
			Timer1_init(&TimerConfiguration3);
    19d8:	ce 01       	movw	r24, r28
    19da:	85 5a       	subi	r24, 0xA5	; 165
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	0e 94 82 18 	call	0x3104	; 0x3104 <Timer1_init>

			LCD_clearScreen();
    19e2:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			LCD_displayString("Door is");
    19e6:	82 e3       	ldi	r24, 0x32	; 50
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "locking..");
    19ee:	24 e5       	ldi	r18, 0x54	; 84
    19f0:	31 e0       	ldi	r19, 0x01	; 1
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>

			while (g_tick < 2) {};
    19fc:	80 91 96 01 	lds	r24, 0x0196
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	e0 f3       	brcs	.-8      	; 0x19fc <main+0x696>
			g_tick = 0; /*Reset the interrupts counter*/
    1a04:	10 92 96 01 	sts	0x0196, r1
			Timer1_deInit(); /*Reset timer1 registers*/
    1a08:	0e 94 ed 18 	call	0x31da	; 0x31da <Timer1_deInit>
			LCD_clearScreen();
    1a0c:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			g_HMI_SYSTEM_SEQUENCE = MAIN_OPTIONS;
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	80 93 76 01 	sts	0x0176, r24
    1a16:	93 cd       	rjmp	.-1242   	; 0x153e <main+0x1d8>
			break;
		case CHANGE_PASSWORD:
			do {
				if (failuresCounter < NUMBER_OF_CONSECUTIVE_FAILURES) {
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e9 5b       	subi	r30, 0xB9	; 185
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <main+0x6c0>
    1a24:	7e c0       	rjmp	.+252    	; 0x1b22 <main+0x7bc>
					enterPassword();
    1a26:	0e 94 34 09 	call	0x1268	; 0x1268 <enterPassword>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e2       	ldi	r26, 0x20	; 32
    1a30:	b1 e4       	ldi	r27, 0x41	; 65
    1a32:	89 8f       	std	Y+25, r24	; 0x19
    1a34:	9a 8f       	std	Y+26, r25	; 0x1a
    1a36:	ab 8f       	std	Y+27, r26	; 0x1b
    1a38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8d 8b       	std	Y+21, r24	; 0x15
    1a54:	9e 8b       	std	Y+22, r25	; 0x16
    1a56:	af 8b       	std	Y+23, r26	; 0x17
    1a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <main+0x716>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 8b       	std	Y+20, r25	; 0x14
    1a78:	8b 8b       	std	Y+19, r24	; 0x13
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <main+0x794>
	else if (__tmp > 65535)
    1a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a80:	8f 89       	ldd	r24, Y+23	; 0x17
    1a82:	98 8d       	ldd	r25, Y+24	; 0x18
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <main+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	69 8d       	ldd	r22, Y+25	; 0x19
    1a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <main+0x776>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
    1ac6:	89 89       	ldd	r24, Y+17	; 0x11
    1ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <main+0x764>
    1ace:	9a 8b       	std	Y+18, r25	; 0x12
    1ad0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <main+0x758>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <main+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	8b 89       	ldd	r24, Y+19	; 0x13
    1afc:	9c 89       	ldd	r25, Y+20	; 0x14
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
    1b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b04:	98 89       	ldd	r25, Y+16	; 0x10
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <main+0x7a0>
    1b0a:	98 8b       	std	Y+16, r25	; 0x10
    1b0c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);
					failuresCounter++;
    1b0e:	de 01       	movw	r26, r28
    1b10:	a9 5b       	subi	r26, 0xB9	; 185
    1b12:	bf 4f       	sbci	r27, 0xFF	; 255
    1b14:	fe 01       	movw	r30, r28
    1b16:	e9 5b       	subi	r30, 0xB9	; 185
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	8c 93       	st	X, r24
    1b20:	12 c0       	rjmp	.+36     	; 0x1b46 <main+0x7e0>
				} else {
					/* ERROR Message */
					LCD_displayString("ERROR!! YOU ARE");
    1b22:	83 e1       	ldi	r24, 0x13	; 19
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "NOT AUTHORIZED");
    1b2a:	23 e2       	ldi	r18, 0x23	; 35
    1b2c:	31 e0       	ldi	r19, 0x01	; 1
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayStringRowColumn>
					displayError();
    1b38:	0e 94 6e 09 	call	0x12dc	; 0x12dc <displayError>
					LCD_clearScreen();
    1b3c:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
					/*Return to the main options after error occurs*/
					g_HMI_SYSTEM_SEQUENCE = MAIN_OPTIONS;
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	80 93 76 01 	sts	0x0176, r24
				}
			} while (UART_receiveByte() != PASSWORDS_MATCHED);
    1b46:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <main+0x7ea>
    1b4e:	64 cf       	rjmp	.-312    	; 0x1a18 <main+0x6b2>
			failuresCounter=0;
    1b50:	fe 01       	movw	r30, r28
    1b52:	e9 5b       	subi	r30, 0xB9	; 185
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	10 82       	st	Z, r1
			LCD_displayString("Change Password");
    1b58:	8e e5       	ldi	r24, 0x5E	; 94
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	aa e7       	ldi	r26, 0x7A	; 122
    1b66:	b4 e4       	ldi	r27, 0x44	; 68
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a ef       	ldi	r20, 0xFA	; 250
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <main+0x84c>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <main+0x8ca>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <main+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <main+0x8ac>
    1bf4:	88 ec       	ldi	r24, 0xC8	; 200
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <main+0x89a>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <main+0x88e>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <main+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <main+0x8d6>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    1c44:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_clearScreen>
			/*REPEAT STEP 1*/
			g_HMI_SYSTEM_SEQUENCE = CREATE_PASSWORD;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	80 93 76 01 	sts	0x0176, r24
    1c4e:	77 cc       	rjmp	.-1810   	; 0x153e <main+0x1d8>

00001c50 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_setupPinDirection+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GPIO_setupPinDirection+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <GPIO_setupPinDirection+0x1c>
    1c6a:	d5 c0       	rjmp	.+426    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <GPIO_setupPinDirection+0x24>
    1c72:	d1 c0       	rjmp	.+418    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <GPIO_setupPinDirection+0x3a>
    1c88:	43 c0       	rjmp	.+134    	; 0x1d10 <GPIO_setupPinDirection+0xc0>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <GPIO_setupPinDirection+0x4e>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <GPIO_setupPinDirection+0x68>
    1c9c:	bc c0       	rjmp	.+376    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <GPIO_setupPinDirection+0x5a>
    1ca8:	5f c0       	rjmp	.+190    	; 0x1d68 <GPIO_setupPinDirection+0x118>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <GPIO_setupPinDirection+0x66>
    1cb4:	85 c0       	rjmp	.+266    	; 0x1dc0 <GPIO_setupPinDirection+0x170>
    1cb6:	af c0       	rjmp	.+350    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	a1 f4       	brne	.+40     	; 0x1ce6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cbe:	aa e3       	ldi	r26, 0x3A	; 58
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ea e3       	ldi	r30, 0x3A	; 58
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_setupPinDirection+0x8c>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_setupPinDirection+0x88>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	98 c0       	rjmp	.+304    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ce6:	aa e3       	ldi	r26, 0x3A	; 58
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ea e3       	ldi	r30, 0x3A	; 58
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <GPIO_setupPinDirection+0xb4>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <GPIO_setupPinDirection+0xb0>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	83 c0       	rjmp	.+262    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	a1 f4       	brne	.+40     	; 0x1d3e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d16:	a7 e3       	ldi	r26, 0x37	; 55
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e7 e3       	ldi	r30, 0x37	; 55
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <GPIO_setupPinDirection+0xe4>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <GPIO_setupPinDirection+0xe0>
    1d38:	84 2b       	or	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	6c c0       	rjmp	.+216    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d3e:	a7 e3       	ldi	r26, 0x37	; 55
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e7 e3       	ldi	r30, 0x37	; 55
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <GPIO_setupPinDirection+0x10c>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <GPIO_setupPinDirection+0x108>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	57 c0       	rjmp	.+174    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d6e:	a4 e3       	ldi	r26, 0x34	; 52
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e4 e3       	ldi	r30, 0x34	; 52
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_setupPinDirection+0x13c>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_setupPinDirection+0x138>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	40 c0       	rjmp	.+128    	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d96:	a4 e3       	ldi	r26, 0x34	; 52
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e4 e3       	ldi	r30, 0x34	; 52
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_setupPinDirection+0x164>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_setupPinDirection+0x160>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	2b c0       	rjmp	.+86     	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	a1 f4       	brne	.+40     	; 0x1dee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1dc6:	a1 e3       	ldi	r26, 0x31	; 49
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e1 e3       	ldi	r30, 0x31	; 49
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_setupPinDirection+0x194>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_setupPinDirection+0x190>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1dee:	a1 e3       	ldi	r26, 0x31	; 49
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_setupPinDirection+0x1bc>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_setupPinDirection+0x1b8>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <GPIO_writePin+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_writePin+0x8>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <GPIO_writePin+0x1c>
    1e40:	d5 c0       	rjmp	.+426    	; 0x1fec <GPIO_writePin+0x1c6>
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <GPIO_writePin+0x24>
    1e48:	d1 c0       	rjmp	.+418    	; 0x1fec <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3d 83       	std	Y+5, r19	; 0x05
    1e52:	2c 83       	std	Y+4, r18	; 0x04
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	9d 81       	ldd	r25, Y+5	; 0x05
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <GPIO_writePin+0x3a>
    1e5e:	43 c0       	rjmp	.+134    	; 0x1ee6 <GPIO_writePin+0xc0>
    1e60:	2c 81       	ldd	r18, Y+4	; 0x04
    1e62:	3d 81       	ldd	r19, Y+5	; 0x05
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <GPIO_writePin+0x4e>
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	71 f0       	breq	.+28     	; 0x1e8e <GPIO_writePin+0x68>
    1e72:	bc c0       	rjmp	.+376    	; 0x1fec <GPIO_writePin+0x1c6>
    1e74:	2c 81       	ldd	r18, Y+4	; 0x04
    1e76:	3d 81       	ldd	r19, Y+5	; 0x05
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <GPIO_writePin+0x5a>
    1e7e:	5f c0       	rjmp	.+190    	; 0x1f3e <GPIO_writePin+0x118>
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	91 05       	cpc	r25, r1
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <GPIO_writePin+0x66>
    1e8a:	85 c0       	rjmp	.+266    	; 0x1f96 <GPIO_writePin+0x170>
    1e8c:	af c0       	rjmp	.+350    	; 0x1fec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	a1 f4       	brne	.+40     	; 0x1ebc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e94:	ab e3       	ldi	r26, 0x3B	; 59
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <GPIO_writePin+0x8c>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <GPIO_writePin+0x88>
    1eb6:	84 2b       	or	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	98 c0       	rjmp	.+304    	; 0x1fec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ebc:	ab e3       	ldi	r26, 0x3B	; 59
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	eb e3       	ldi	r30, 0x3B	; 59
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <GPIO_writePin+0xb4>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <GPIO_writePin+0xb0>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	83 c0       	rjmp	.+262    	; 0x1fec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	a1 f4       	brne	.+40     	; 0x1f14 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1eec:	a8 e3       	ldi	r26, 0x38	; 56
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e8 e3       	ldi	r30, 0x38	; 56
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <GPIO_writePin+0xe4>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <GPIO_writePin+0xe0>
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	6c c0       	rjmp	.+216    	; 0x1fec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f14:	a8 e3       	ldi	r26, 0x38	; 56
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e8 e3       	ldi	r30, 0x38	; 56
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <GPIO_writePin+0x10c>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <GPIO_writePin+0x108>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	57 c0       	rjmp	.+174    	; 0x1fec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	a1 f4       	brne	.+40     	; 0x1f6c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f44:	a5 e3       	ldi	r26, 0x35	; 53
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e5 e3       	ldi	r30, 0x35	; 53
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_writePin+0x13c>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <GPIO_writePin+0x138>
    1f66:	84 2b       	or	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	40 c0       	rjmp	.+128    	; 0x1fec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f6c:	a5 e3       	ldi	r26, 0x35	; 53
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e5 e3       	ldi	r30, 0x35	; 53
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_writePin+0x164>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_writePin+0x160>
    1f8e:	80 95       	com	r24
    1f90:	84 23       	and	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	2b c0       	rjmp	.+86     	; 0x1fec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	a1 f4       	brne	.+40     	; 0x1fc4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f9c:	a2 e3       	ldi	r26, 0x32	; 50
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e2 e3       	ldi	r30, 0x32	; 50
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <GPIO_writePin+0x194>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <GPIO_writePin+0x190>
    1fbe:	84 2b       	or	r24, r20
    1fc0:	8c 93       	st	X, r24
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fc4:	a2 e3       	ldi	r26, 0x32	; 50
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e2 e3       	ldi	r30, 0x32	; 50
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	48 2f       	mov	r20, r24
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 2e       	mov	r0, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <GPIO_writePin+0x1bc>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	0a 94       	dec	r0
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <GPIO_writePin+0x1b8>
    1fe6:	80 95       	com	r24
    1fe8:	84 23       	and	r24, r20
    1fea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <GPIO_readPin+0x6>
    2002:	00 d0       	rcall	.+0      	; 0x2004 <GPIO_readPin+0x8>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	8a 83       	std	Y+2, r24	; 0x02
    200c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    200e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	88 30       	cpi	r24, 0x08	; 8
    2014:	08 f0       	brcs	.+2      	; 0x2018 <GPIO_readPin+0x1c>
    2016:	84 c0       	rjmp	.+264    	; 0x2120 <GPIO_readPin+0x124>
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	08 f0       	brcs	.+2      	; 0x2020 <GPIO_readPin+0x24>
    201e:	80 c0       	rjmp	.+256    	; 0x2120 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	3d 83       	std	Y+5, r19	; 0x05
    2028:	2c 83       	std	Y+4, r18	; 0x04
    202a:	4c 81       	ldd	r20, Y+4	; 0x04
    202c:	5d 81       	ldd	r21, Y+5	; 0x05
    202e:	41 30       	cpi	r20, 0x01	; 1
    2030:	51 05       	cpc	r21, r1
    2032:	79 f1       	breq	.+94     	; 0x2092 <GPIO_readPin+0x96>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	91 05       	cpc	r25, r1
    203c:	34 f4       	brge	.+12     	; 0x204a <GPIO_readPin+0x4e>
    203e:	2c 81       	ldd	r18, Y+4	; 0x04
    2040:	3d 81       	ldd	r19, Y+5	; 0x05
    2042:	21 15       	cp	r18, r1
    2044:	31 05       	cpc	r19, r1
    2046:	69 f0       	breq	.+26     	; 0x2062 <GPIO_readPin+0x66>
    2048:	6b c0       	rjmp	.+214    	; 0x2120 <GPIO_readPin+0x124>
    204a:	4c 81       	ldd	r20, Y+4	; 0x04
    204c:	5d 81       	ldd	r21, Y+5	; 0x05
    204e:	42 30       	cpi	r20, 0x02	; 2
    2050:	51 05       	cpc	r21, r1
    2052:	b9 f1       	breq	.+110    	; 0x20c2 <GPIO_readPin+0xc6>
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	91 05       	cpc	r25, r1
    205c:	09 f4       	brne	.+2      	; 0x2060 <GPIO_readPin+0x64>
    205e:	49 c0       	rjmp	.+146    	; 0x20f2 <GPIO_readPin+0xf6>
    2060:	5f c0       	rjmp	.+190    	; 0x2120 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2062:	e9 e3       	ldi	r30, 0x39	; 57
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_readPin+0x7e>
    2076:	55 95       	asr	r21
    2078:	47 95       	ror	r20
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_readPin+0x7a>
    207e:	ca 01       	movw	r24, r20
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	88 23       	and	r24, r24
    2086:	19 f0       	breq	.+6      	; 0x208e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	49 c0       	rjmp	.+146    	; 0x2120 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	47 c0       	rjmp	.+142    	; 0x2120 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2092:	e6 e3       	ldi	r30, 0x36	; 54
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a9 01       	movw	r20, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <GPIO_readPin+0xae>
    20a6:	55 95       	asr	r21
    20a8:	47 95       	ror	r20
    20aa:	8a 95       	dec	r24
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <GPIO_readPin+0xaa>
    20ae:	ca 01       	movw	r24, r20
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	88 23       	and	r24, r24
    20b6:	19 f0       	breq	.+6      	; 0x20be <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	31 c0       	rjmp	.+98     	; 0x2120 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20be:	19 82       	std	Y+1, r1	; 0x01
    20c0:	2f c0       	rjmp	.+94     	; 0x2120 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20c2:	e3 e3       	ldi	r30, 0x33	; 51
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a9 01       	movw	r20, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <GPIO_readPin+0xde>
    20d6:	55 95       	asr	r21
    20d8:	47 95       	ror	r20
    20da:	8a 95       	dec	r24
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <GPIO_readPin+0xda>
    20de:	ca 01       	movw	r24, r20
    20e0:	81 70       	andi	r24, 0x01	; 1
    20e2:	90 70       	andi	r25, 0x00	; 0
    20e4:	88 23       	and	r24, r24
    20e6:	19 f0       	breq	.+6      	; 0x20ee <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	19 c0       	rjmp	.+50     	; 0x2120 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	17 c0       	rjmp	.+46     	; 0x2120 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20f2:	e0 e3       	ldi	r30, 0x30	; 48
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_readPin+0x10e>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_readPin+0x10a>
    210e:	ca 01       	movw	r24, r20
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	88 23       	and	r24, r24
    2116:	19 f0       	breq	.+6      	; 0x211e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    211e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <GPIO_setupPortDirection+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <GPIO_setupPortDirection+0x8>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	90 f5       	brcc	.+100    	; 0x21ac <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	3c 83       	std	Y+4, r19	; 0x04
    2150:	2b 83       	std	Y+3, r18	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	91 05       	cpc	r25, r1
    215a:	d1 f0       	breq	.+52     	; 0x2190 <GPIO_setupPortDirection+0x5e>
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	2c f4       	brge	.+10     	; 0x2170 <GPIO_setupPortDirection+0x3e>
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	61 f0       	breq	.+24     	; 0x2186 <GPIO_setupPortDirection+0x54>
    216e:	1e c0       	rjmp	.+60     	; 0x21ac <GPIO_setupPortDirection+0x7a>
    2170:	2b 81       	ldd	r18, Y+3	; 0x03
    2172:	3c 81       	ldd	r19, Y+4	; 0x04
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	81 f0       	breq	.+32     	; 0x219a <GPIO_setupPortDirection+0x68>
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	91 05       	cpc	r25, r1
    2182:	81 f0       	breq	.+32     	; 0x21a4 <GPIO_setupPortDirection+0x72>
    2184:	13 c0       	rjmp	.+38     	; 0x21ac <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2186:	ea e3       	ldi	r30, 0x3A	; 58
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	80 83       	st	Z, r24
    218e:	0e c0       	rjmp	.+28     	; 0x21ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2190:	e7 e3       	ldi	r30, 0x37	; 55
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	80 83       	st	Z, r24
    2198:	09 c0       	rjmp	.+18     	; 0x21ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    219a:	e4 e3       	ldi	r30, 0x34	; 52
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	80 83       	st	Z, r24
    21a2:	04 c0       	rjmp	.+8      	; 0x21ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21a4:	e1 e3       	ldi	r30, 0x31	; 49
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	80 83       	st	Z, r24
			break;
		}
	}
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <GPIO_writePort+0x6>
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <GPIO_writePort+0x8>
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	90 f5       	brcc	.+100    	; 0x2234 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	3c 83       	std	Y+4, r19	; 0x04
    21d8:	2b 83       	std	Y+3, r18	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	91 05       	cpc	r25, r1
    21e2:	d1 f0       	breq	.+52     	; 0x2218 <GPIO_writePort+0x5e>
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <GPIO_writePort+0x3e>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	61 f0       	breq	.+24     	; 0x220e <GPIO_writePort+0x54>
    21f6:	1e c0       	rjmp	.+60     	; 0x2234 <GPIO_writePort+0x7a>
    21f8:	2b 81       	ldd	r18, Y+3	; 0x03
    21fa:	3c 81       	ldd	r19, Y+4	; 0x04
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	81 f0       	breq	.+32     	; 0x2222 <GPIO_writePort+0x68>
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	91 05       	cpc	r25, r1
    220a:	81 f0       	breq	.+32     	; 0x222c <GPIO_writePort+0x72>
    220c:	13 c0       	rjmp	.+38     	; 0x2234 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    220e:	eb e3       	ldi	r30, 0x3B	; 59
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	80 83       	st	Z, r24
    2216:	0e c0       	rjmp	.+28     	; 0x2234 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2218:	e8 e3       	ldi	r30, 0x38	; 56
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	80 83       	st	Z, r24
    2220:	09 c0       	rjmp	.+18     	; 0x2234 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2222:	e5 e3       	ldi	r30, 0x35	; 53
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	80 83       	st	Z, r24
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    222c:	e2 e3       	ldi	r30, 0x32	; 50
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	80 83       	st	Z, r24
			break;
		}
	}
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <GPIO_readPort+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <GPIO_readPort+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2250:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	84 30       	cpi	r24, 0x04	; 4
    2256:	90 f5       	brcc	.+100    	; 0x22bc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3c 83       	std	Y+4, r19	; 0x04
    2260:	2b 83       	std	Y+3, r18	; 0x03
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	d1 f0       	breq	.+52     	; 0x22a0 <GPIO_readPort+0x5e>
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	3c 81       	ldd	r19, Y+4	; 0x04
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	2c f4       	brge	.+10     	; 0x2280 <GPIO_readPort+0x3e>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	61 f0       	breq	.+24     	; 0x2296 <GPIO_readPort+0x54>
    227e:	1e c0       	rjmp	.+60     	; 0x22bc <GPIO_readPort+0x7a>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	81 f0       	breq	.+32     	; 0x22aa <GPIO_readPort+0x68>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	91 05       	cpc	r25, r1
    2292:	81 f0       	breq	.+32     	; 0x22b4 <GPIO_readPort+0x72>
    2294:	13 c0       	rjmp	.+38     	; 0x22bc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2296:	e9 e3       	ldi	r30, 0x39	; 57
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	0e c0       	rjmp	.+28     	; 0x22bc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22a0:	e6 e3       	ldi	r30, 0x36	; 54
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	09 c0       	rjmp	.+18     	; 0x22bc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22aa:	e3 e3       	ldi	r30, 0x33	; 51
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22b4:	e0 e3       	ldi	r30, 0x30	; 48
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	60 97       	sbiw	r28, 0x10	; 16
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	63 e0       	ldi	r22, 0x03	; 3
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	64 e0       	ldi	r22, 0x04	; 4
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	65 e0       	ldi	r22, 0x05	; 5
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	66 e0       	ldi	r22, 0x06	; 6
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	67 e0       	ldi	r22, 0x07	; 7
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2330:	1f 86       	std	Y+15, r1	; 0x0f
    2332:	ab c0       	rjmp	.+342    	; 0x248a <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	6f 85       	ldd	r22, Y+15	; 0x0f
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>

			/* Sets the row output pin to low */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	6f 85       	ldd	r22, Y+15	; 0x0f
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2348:	18 8a       	std	Y+16, r1	; 0x10
    234a:	22 c0       	rjmp	.+68     	; 0x2390 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    234c:	88 89       	ldd	r24, Y+16	; 0x10
    234e:	98 2f       	mov	r25, r24
    2350:	9c 5f       	subi	r25, 0xFC	; 252
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	69 2f       	mov	r22, r25
    2356:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <GPIO_readPin>
    235a:	88 23       	and	r24, r24
    235c:	b1 f4       	brne	.+44     	; 0x238a <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    235e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	98 2f       	mov	r25, r24
    236e:	88 89       	ldd	r24, Y+16	; 0x10
    2370:	89 0f       	add	r24, r25
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_4x4_adjustKeyNumber>
			/* Makes the checked pin to input again to re-check in the next iteration */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2378:	60 96       	adiw	r28, 0x10	; 16
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Sets the row output pin to low */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    238a:	88 89       	ldd	r24, Y+16	; 0x10
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	88 8b       	std	Y+16, r24	; 0x10
    2390:	88 89       	ldd	r24, Y+16	; 0x10
    2392:	84 30       	cpi	r24, 0x04	; 4
    2394:	d8 f2       	brcs	.-74     	; 0x234c <KEYPAD_getPressedKey+0x80>
						#endif
					#endif
				}
			}
			/* Makes the checked pin to input again to re-check in the next iteration */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	6f 85       	ldd	r22, Y+15	; 0x0f
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 ea       	ldi	r26, 0xA0	; 160
    23a6:	b0 e4       	ldi	r27, 0x40	; 64
    23a8:	8b 87       	std	Y+11, r24	; 0x0b
    23aa:	9c 87       	std	Y+12, r25	; 0x0c
    23ac:	ad 87       	std	Y+13, r26	; 0x0d
    23ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a ef       	ldi	r20, 0xFA	; 250
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	8f 83       	std	Y+7, r24	; 0x07
    23ca:	98 87       	std	Y+8, r25	; 0x08
    23cc:	a9 87       	std	Y+9, r26	; 0x09
    23ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    23f2:	6f 81       	ldd	r22, Y+7	; 0x07
    23f4:	78 85       	ldd	r23, Y+8	; 0x08
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	6b 85       	ldd	r22, Y+11	; 0x0b
    240c:	7c 85       	ldd	r23, Y+12	; 0x0c
    240e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2410:	9e 85       	ldd	r25, Y+14	; 0x0e
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <KEYPAD_getPressedKey+0x186>
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <KEYPAD_getPressedKey+0x174>
    2444:	9c 83       	std	Y+4, r25	; 0x04
    2446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <KEYPAD_getPressedKey+0x168>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <KEYPAD_getPressedKey+0x1b0>
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	8f 87       	std	Y+15, r24	; 0x0f
    248a:	8f 85       	ldd	r24, Y+15	; 0x0f
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	08 f4       	brcc	.+2      	; 0x2492 <KEYPAD_getPressedKey+0x1c6>
    2490:	51 cf       	rjmp	.-350    	; 0x2334 <KEYPAD_getPressedKey+0x68>
    2492:	4e cf       	rjmp	.-356    	; 0x2330 <KEYPAD_getPressedKey+0x64>

00002494 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <KEYPAD_4x4_adjustKeyNumber+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <KEYPAD_4x4_adjustKeyNumber+0x8>
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    24a2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	3c 83       	std	Y+4, r19	; 0x04
    24ac:	2b 83       	std	Y+3, r18	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	88 30       	cpi	r24, 0x08	; 8
    24b4:	91 05       	cpc	r25, r1
    24b6:	09 f4       	brne	.+2      	; 0x24ba <KEYPAD_4x4_adjustKeyNumber+0x26>
    24b8:	70 c0       	rjmp	.+224    	; 0x259a <KEYPAD_4x4_adjustKeyNumber+0x106>
    24ba:	2b 81       	ldd	r18, Y+3	; 0x03
    24bc:	3c 81       	ldd	r19, Y+4	; 0x04
    24be:	29 30       	cpi	r18, 0x09	; 9
    24c0:	31 05       	cpc	r19, r1
    24c2:	5c f5       	brge	.+86     	; 0x251a <KEYPAD_4x4_adjustKeyNumber+0x86>
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	84 30       	cpi	r24, 0x04	; 4
    24ca:	91 05       	cpc	r25, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    24ce:	59 c0       	rjmp	.+178    	; 0x2582 <KEYPAD_4x4_adjustKeyNumber+0xee>
    24d0:	2b 81       	ldd	r18, Y+3	; 0x03
    24d2:	3c 81       	ldd	r19, Y+4	; 0x04
    24d4:	25 30       	cpi	r18, 0x05	; 5
    24d6:	31 05       	cpc	r19, r1
    24d8:	9c f4       	brge	.+38     	; 0x2500 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	82 30       	cpi	r24, 0x02	; 2
    24e0:	91 05       	cpc	r25, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    24e4:	48 c0       	rjmp	.+144    	; 0x2576 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	23 30       	cpi	r18, 0x03	; 3
    24ec:	31 05       	cpc	r19, r1
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    24f0:	45 c0       	rjmp	.+138    	; 0x257c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <KEYPAD_4x4_adjustKeyNumber+0x6a>
    24fc:	39 c0       	rjmp	.+114    	; 0x2570 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    24fe:	67 c0       	rjmp	.+206    	; 0x25ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	26 30       	cpi	r18, 0x06	; 6
    2506:	31 05       	cpc	r19, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <KEYPAD_4x4_adjustKeyNumber+0x78>
    250a:	41 c0       	rjmp	.+130    	; 0x258e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	87 30       	cpi	r24, 0x07	; 7
    2512:	91 05       	cpc	r25, r1
    2514:	0c f0       	brlt	.+2      	; 0x2518 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2516:	3e c0       	rjmp	.+124    	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2518:	37 c0       	rjmp	.+110    	; 0x2588 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    251a:	2b 81       	ldd	r18, Y+3	; 0x03
    251c:	3c 81       	ldd	r19, Y+4	; 0x04
    251e:	2c 30       	cpi	r18, 0x0C	; 12
    2520:	31 05       	cpc	r19, r1
    2522:	09 f4       	brne	.+2      	; 0x2526 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2524:	46 c0       	rjmp	.+140    	; 0x25b2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	8d 30       	cpi	r24, 0x0D	; 13
    252c:	91 05       	cpc	r25, r1
    252e:	5c f4       	brge	.+22     	; 0x2546 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2530:	2b 81       	ldd	r18, Y+3	; 0x03
    2532:	3c 81       	ldd	r19, Y+4	; 0x04
    2534:	2a 30       	cpi	r18, 0x0A	; 10
    2536:	31 05       	cpc	r19, r1
    2538:	b1 f1       	breq	.+108    	; 0x25a6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	8b 30       	cpi	r24, 0x0B	; 11
    2540:	91 05       	cpc	r25, r1
    2542:	a4 f5       	brge	.+104    	; 0x25ac <KEYPAD_4x4_adjustKeyNumber+0x118>
    2544:	2d c0       	rjmp	.+90     	; 0x25a0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2546:	2b 81       	ldd	r18, Y+3	; 0x03
    2548:	3c 81       	ldd	r19, Y+4	; 0x04
    254a:	2e 30       	cpi	r18, 0x0E	; 14
    254c:	31 05       	cpc	r19, r1
    254e:	b9 f1       	breq	.+110    	; 0x25be <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	8e 30       	cpi	r24, 0x0E	; 14
    2556:	91 05       	cpc	r25, r1
    2558:	7c f1       	brlt	.+94     	; 0x25b8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    255a:	2b 81       	ldd	r18, Y+3	; 0x03
    255c:	3c 81       	ldd	r19, Y+4	; 0x04
    255e:	2f 30       	cpi	r18, 0x0F	; 15
    2560:	31 05       	cpc	r19, r1
    2562:	79 f1       	breq	.+94     	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	80 31       	cpi	r24, 0x10	; 16
    256a:	91 05       	cpc	r25, r1
    256c:	69 f1       	breq	.+90     	; 0x25c8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    256e:	2f c0       	rjmp	.+94     	; 0x25ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2570:	87 e0       	ldi	r24, 0x07	; 7
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	2e c0       	rjmp	.+92     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2576:	88 e0       	ldi	r24, 0x08	; 8
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	2b c0       	rjmp	.+86     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    257c:	89 e0       	ldi	r24, 0x09	; 9
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	28 c0       	rjmp	.+80     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2582:	85 e2       	ldi	r24, 0x25	; 37
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	25 c0       	rjmp	.+74     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2588:	84 e0       	ldi	r24, 0x04	; 4
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	22 c0       	rjmp	.+68     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    258e:	85 e0       	ldi	r24, 0x05	; 5
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	1f c0       	rjmp	.+62     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2594:	86 e0       	ldi	r24, 0x06	; 6
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	1c c0       	rjmp	.+56     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    259a:	8a e2       	ldi	r24, 0x2A	; 42
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	19 c0       	rjmp	.+50     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    25a6:	82 e0       	ldi	r24, 0x02	; 2
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	13 c0       	rjmp	.+38     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	10 c0       	rjmp	.+32     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    25b2:	8d e2       	ldi	r24, 0x2D	; 45
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	0d c0       	rjmp	.+26     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    25b8:	8d e0       	ldi	r24, 0x0D	; 13
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	0a c0       	rjmp	.+20     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    25be:	19 82       	std	Y+1, r1	; 0x01
    25c0:	08 c0       	rjmp	.+16     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    25c2:	8d e3       	ldi	r24, 0x3D	; 61
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    25c8:	8b e2       	ldi	r24, 0x2B	; 43
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	2e 97       	sbiw	r28, 0x0e	; 14
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	41 e0       	ldi	r20, 0x01	; 1
    2606:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_setupPinDirection>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 ea       	ldi	r26, 0xA0	; 160
    2610:	b1 e4       	ldi	r27, 0x41	; 65
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <LCD_init+0x7a>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <LCD_init+0xf8>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_init+0xda>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_init+0xc8>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <LCD_init+0xbc>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_init+0x104>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	6f ef       	ldi	r22, 0xFF	; 255
    26f2:	0e 94 99 10 	call	0x2132	; 0x2132 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    26f6:	88 e3       	ldi	r24, 0x38	; 56
    26f8:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    26fc:	8c e0       	ldi	r24, 0x0C	; 12
    26fe:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    2708:	2e 96       	adiw	r28, 0x0e	; 14
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	e9 97       	sbiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e8       	ldi	r26, 0x80	; 128
    2740:	bf e3       	ldi	r27, 0x3F	; 63
    2742:	8d ab       	std	Y+53, r24	; 0x35
    2744:	9e ab       	std	Y+54, r25	; 0x36
    2746:	af ab       	std	Y+55, r26	; 0x37
    2748:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6d a9       	ldd	r22, Y+53	; 0x35
    274c:	7e a9       	ldd	r23, Y+54	; 0x36
    274e:	8f a9       	ldd	r24, Y+55	; 0x37
    2750:	98 ad       	ldd	r25, Y+56	; 0x38
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	89 ab       	std	Y+49, r24	; 0x31
    2764:	9a ab       	std	Y+50, r25	; 0x32
    2766:	ab ab       	std	Y+51, r26	; 0x33
    2768:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276a:	69 a9       	ldd	r22, Y+49	; 0x31
    276c:	7a a9       	ldd	r23, Y+50	; 0x32
    276e:	8b a9       	ldd	r24, Y+51	; 0x33
    2770:	9c a9       	ldd	r25, Y+52	; 0x34
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_sendCommand+0x72>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	98 ab       	std	Y+48, r25	; 0x30
    2788:	8f a7       	std	Y+47, r24	; 0x2f
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    278c:	69 a9       	ldd	r22, Y+49	; 0x31
    278e:	7a a9       	ldd	r23, Y+50	; 0x32
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	9c a9       	ldd	r25, Y+52	; 0x34
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6d a9       	ldd	r22, Y+53	; 0x35
    27a6:	7e a9       	ldd	r23, Y+54	; 0x36
    27a8:	8f a9       	ldd	r24, Y+55	; 0x37
    27aa:	98 ad       	ldd	r25, Y+56	; 0x38
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_sendCommand+0xd2>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9e a7       	std	Y+46, r25	; 0x2e
    27d4:	8d a7       	std	Y+45, r24	; 0x2d
    27d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_sendCommand+0xc0>
    27de:	9e a7       	std	Y+46, r25	; 0x2e
    27e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e4:	98 a9       	ldd	r25, Y+48	; 0x30
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_sendCommand+0xb4>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	69 a9       	ldd	r22, Y+49	; 0x31
    27f8:	7a a9       	ldd	r23, Y+50	; 0x32
    27fa:	8b a9       	ldd	r24, Y+51	; 0x33
    27fc:	9c a9       	ldd	r25, Y+52	; 0x34
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
    280a:	8f a5       	ldd	r24, Y+47	; 0x2f
    280c:	98 a9       	ldd	r25, Y+48	; 0x30
    280e:	9c a7       	std	Y+44, r25	; 0x2c
    2810:	8b a7       	std	Y+43, r24	; 0x2b
    2812:	8b a5       	ldd	r24, Y+43	; 0x2b
    2814:	9c a5       	ldd	r25, Y+44	; 0x2c
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_sendCommand+0xfc>
    281a:	9c a7       	std	Y+44, r25	; 0x2c
    281c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8f a3       	std	Y+39, r24	; 0x27
    2832:	98 a7       	std	Y+40, r25	; 0x28
    2834:	a9 a7       	std	Y+41, r26	; 0x29
    2836:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6f a1       	ldd	r22, Y+39	; 0x27
    283a:	78 a5       	ldd	r23, Y+40	; 0x28
    283c:	89 a5       	ldd	r24, Y+41	; 0x29
    283e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8b a3       	std	Y+35, r24	; 0x23
    2852:	9c a3       	std	Y+36, r25	; 0x24
    2854:	ad a3       	std	Y+37, r26	; 0x25
    2856:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2858:	6b a1       	ldd	r22, Y+35	; 0x23
    285a:	7c a1       	ldd	r23, Y+36	; 0x24
    285c:	8d a1       	ldd	r24, Y+37	; 0x25
    285e:	9e a1       	ldd	r25, Y+38	; 0x26
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_sendCommand+0x160>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9a a3       	std	Y+34, r25	; 0x22
    2876:	89 a3       	std	Y+33, r24	; 0x21
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6f a1       	ldd	r22, Y+39	; 0x27
    2894:	78 a5       	ldd	r23, Y+40	; 0x28
    2896:	89 a5       	ldd	r24, Y+41	; 0x29
    2898:	9a a5       	ldd	r25, Y+42	; 0x2a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_sendCommand+0x1c0>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	98 a3       	std	Y+32, r25	; 0x20
    28c2:	8f 8f       	std	Y+31, r24	; 0x1f
    28c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c6:	98 a1       	ldd	r25, Y+32	; 0x20
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_sendCommand+0x1ae>
    28cc:	98 a3       	std	Y+32, r25	; 0x20
    28ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	89 a1       	ldd	r24, Y+33	; 0x21
    28d2:	9a a1       	ldd	r25, Y+34	; 0x22
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9a a3       	std	Y+34, r25	; 0x22
    28d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	89 a1       	ldd	r24, Y+33	; 0x21
    28dc:	9a a1       	ldd	r25, Y+34	; 0x22
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_sendCommand+0x1a2>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6b a1       	ldd	r22, Y+35	; 0x23
    28e6:	7c a1       	ldd	r23, Y+36	; 0x24
    28e8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ea:	9e a1       	ldd	r25, Y+38	; 0x26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9a a3       	std	Y+34, r25	; 0x22
    28f6:	89 a3       	std	Y+33, r24	; 0x21
    28f8:	89 a1       	ldd	r24, Y+33	; 0x21
    28fa:	9a a1       	ldd	r25, Y+34	; 0x22
    28fc:	9e 8f       	std	Y+30, r25	; 0x1e
    28fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2902:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_sendCommand+0x1ea>
    2908:	9e 8f       	std	Y+30, r25	; 0x1e
    290a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	69 ad       	ldd	r22, Y+57	; 0x39
    2910:	0e 94 dd 10 	call	0x21ba	; 0x21ba <GPIO_writePort>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e8       	ldi	r26, 0x80	; 128
    291a:	bf e3       	ldi	r27, 0x3F	; 63
    291c:	89 8f       	std	Y+25, r24	; 0x19
    291e:	9a 8f       	std	Y+26, r25	; 0x1a
    2920:	ab 8f       	std	Y+27, r26	; 0x1b
    2922:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	69 8d       	ldd	r22, Y+25	; 0x19
    2926:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8d 8b       	std	Y+21, r24	; 0x15
    293e:	9e 8b       	std	Y+22, r25	; 0x16
    2940:	af 8b       	std	Y+23, r26	; 0x17
    2942:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2944:	6d 89       	ldd	r22, Y+21	; 0x15
    2946:	7e 89       	ldd	r23, Y+22	; 0x16
    2948:	8f 89       	ldd	r24, Y+23	; 0x17
    294a:	98 8d       	ldd	r25, Y+24	; 0x18
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LCD_sendCommand+0x24c>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	69 8d       	ldd	r22, Y+25	; 0x19
    2980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9c 8b       	std	Y+20, r25	; 0x14
    29a4:	8b 8b       	std	Y+19, r24	; 0x13
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LCD_sendCommand+0x2ac>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
    29ae:	89 8b       	std	Y+17, r24	; 0x11
    29b0:	89 89       	ldd	r24, Y+17	; 0x11
    29b2:	9a 89       	ldd	r25, Y+18	; 0x12
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_sendCommand+0x29a>
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
    29ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8b 89       	ldd	r24, Y+19	; 0x13
    29be:	9c 89       	ldd	r25, Y+20	; 0x14
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9c 8b       	std	Y+20, r25	; 0x14
    29c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8b 89       	ldd	r24, Y+19	; 0x13
    29c8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LCD_sendCommand+0x28e>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6d 89       	ldd	r22, Y+21	; 0x15
    29d2:	7e 89       	ldd	r23, Y+22	; 0x16
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	98 8d       	ldd	r25, Y+24	; 0x18
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	8b 89       	ldd	r24, Y+19	; 0x13
    29e6:	9c 89       	ldd	r25, Y+20	; 0x14
    29e8:	98 8b       	std	Y+16, r25	; 0x10
    29ea:	8f 87       	std	Y+15, r24	; 0x0f
    29ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ee:	98 89       	ldd	r25, Y+16	; 0x10
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_sendCommand+0x2d6>
    29f4:	98 8b       	std	Y+16, r25	; 0x10
    29f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e8       	ldi	r26, 0x80	; 128
    2a08:	bf e3       	ldi	r27, 0x3F	; 63
    2a0a:	8b 87       	std	Y+11, r24	; 0x0b
    2a0c:	9c 87       	std	Y+12, r25	; 0x0c
    2a0e:	ad 87       	std	Y+13, r26	; 0x0d
    2a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	4a ef       	ldi	r20, 0xFA	; 250
    2a20:	54 e4       	ldi	r21, 0x44	; 68
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8f 83       	std	Y+7, r24	; 0x07
    2a2c:	98 87       	std	Y+8, r25	; 0x08
    2a2e:	a9 87       	std	Y+9, r26	; 0x09
    2a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a46:	88 23       	and	r24, r24
    2a48:	2c f4       	brge	.+10     	; 0x2a54 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	3f c0       	rjmp	.+126    	; 0x2ad2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	57 e4       	ldi	r21, 0x47	; 71
    2a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	4c f5       	brge	.+82     	; 0x2abe <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e2       	ldi	r20, 0x20	; 32
    2a7a:	51 e4       	ldi	r21, 0x41	; 65
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <LCD_sendCommand+0x39a>
    2a96:	88 ec       	ldi	r24, 0xC8	; 200
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 83       	std	Y+4, r25	; 0x04
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_sendCommand+0x388>
    2aa6:	9c 83       	std	Y+4, r25	; 0x04
    2aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	69 f7       	brne	.-38     	; 0x2a96 <LCD_sendCommand+0x37c>
    2abc:	14 c0       	rjmp	.+40     	; 0x2ae6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac0:	78 85       	ldd	r23, Y+8	; 0x08
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9e 83       	std	Y+6, r25	; 0x06
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_sendCommand+0x3c4>
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ae6:	e9 96       	adiw	r28, 0x39	; 57
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	e9 97       	sbiw	r28, 0x39	; 57
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	8d ab       	std	Y+53, r24	; 0x35
    2b22:	9e ab       	std	Y+54, r25	; 0x36
    2b24:	af ab       	std	Y+55, r26	; 0x37
    2b26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6d a9       	ldd	r22, Y+53	; 0x35
    2b2a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a ef       	ldi	r20, 0xFA	; 250
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	89 ab       	std	Y+49, r24	; 0x31
    2b42:	9a ab       	std	Y+50, r25	; 0x32
    2b44:	ab ab       	std	Y+51, r26	; 0x33
    2b46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b48:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	98 ab       	std	Y+48, r25	; 0x30
    2b66:	8f a7       	std	Y+47, r24	; 0x2f
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b70:	9c a9       	ldd	r25, Y+52	; 0x34
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6d a9       	ldd	r22, Y+53	; 0x35
    2b84:	7e a9       	ldd	r23, Y+54	; 0x36
    2b86:	8f a9       	ldd	r24, Y+55	; 0x37
    2b88:	98 ad       	ldd	r25, Y+56	; 0x38
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	98 ab       	std	Y+48, r25	; 0x30
    2ba8:	8f a7       	std	Y+47, r24	; 0x2f
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <LCD_displayCharacter+0xd2>
    2bac:	88 ec       	ldi	r24, 0xC8	; 200
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9e a7       	std	Y+46, r25	; 0x2e
    2bb2:	8d a7       	std	Y+45, r24	; 0x2d
    2bb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_displayCharacter+0xc0>
    2bbc:	9e a7       	std	Y+46, r25	; 0x2e
    2bbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	98 ab       	std	Y+48, r25	; 0x30
    2bc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <LCD_displayCharacter+0xb4>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bda:	9c a9       	ldd	r25, Y+52	; 0x34
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	98 ab       	std	Y+48, r25	; 0x30
    2be6:	8f a7       	std	Y+47, r24	; 0x2f
    2be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bea:	98 a9       	ldd	r25, Y+48	; 0x30
    2bec:	9c a7       	std	Y+44, r25	; 0x2c
    2bee:	8b a7       	std	Y+43, r24	; 0x2b
    2bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_displayCharacter+0xfc>
    2bf8:	9c a7       	std	Y+44, r25	; 0x2c
    2bfa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	41 e0       	ldi	r20, 0x01	; 1
    2c02:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a0 e8       	ldi	r26, 0x80	; 128
    2c0c:	bf e3       	ldi	r27, 0x3F	; 63
    2c0e:	8f a3       	std	Y+39, r24	; 0x27
    2c10:	98 a7       	std	Y+40, r25	; 0x28
    2c12:	a9 a7       	std	Y+41, r26	; 0x29
    2c14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6f a1       	ldd	r22, Y+39	; 0x27
    2c18:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a ef       	ldi	r20, 0xFA	; 250
    2c24:	54 e4       	ldi	r21, 0x44	; 68
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8b a3       	std	Y+35, r24	; 0x23
    2c30:	9c a3       	std	Y+36, r25	; 0x24
    2c32:	ad a3       	std	Y+37, r26	; 0x25
    2c34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c36:	6b a1       	ldd	r22, Y+35	; 0x23
    2c38:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9a a3       	std	Y+34, r25	; 0x22
    2c54:	89 a3       	std	Y+33, r24	; 0x21
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2c58:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6f a1       	ldd	r22, Y+39	; 0x27
    2c72:	78 a5       	ldd	r23, Y+40	; 0x28
    2c74:	89 a5       	ldd	r24, Y+41	; 0x29
    2c76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9a a3       	std	Y+34, r25	; 0x22
    2c96:	89 a3       	std	Y+33, r24	; 0x21
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <LCD_displayCharacter+0x1c0>
    2c9a:	88 ec       	ldi	r24, 0xC8	; 200
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	98 a3       	std	Y+32, r25	; 0x20
    2ca0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ca2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ca4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <LCD_displayCharacter+0x1ae>
    2caa:	98 a3       	std	Y+32, r25	; 0x20
    2cac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9a a3       	std	Y+34, r25	; 0x22
    2cb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cba:	9a a1       	ldd	r25, Y+34	; 0x22
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <LCD_displayCharacter+0x1a2>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9a a3       	std	Y+34, r25	; 0x22
    2cd4:	89 a3       	std	Y+33, r24	; 0x21
    2cd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cda:	9e 8f       	std	Y+30, r25	; 0x1e
    2cdc:	8d 8f       	std	Y+29, r24	; 0x1d
    2cde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_displayCharacter+0x1ea>
    2ce6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	69 ad       	ldd	r22, Y+57	; 0x39
    2cee:	0e 94 dd 10 	call	0x21ba	; 0x21ba <GPIO_writePort>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a0 e8       	ldi	r26, 0x80	; 128
    2cf8:	bf e3       	ldi	r27, 0x3F	; 63
    2cfa:	89 8f       	std	Y+25, r24	; 0x19
    2cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    2d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	69 8d       	ldd	r22, Y+25	; 0x19
    2d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a ef       	ldi	r20, 0xFA	; 250
    2d10:	54 e4       	ldi	r21, 0x44	; 68
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	8d 8b       	std	Y+21, r24	; 0x15
    2d1c:	9e 8b       	std	Y+22, r25	; 0x16
    2d1e:	af 8b       	std	Y+23, r26	; 0x17
    2d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d22:	6d 89       	ldd	r22, Y+21	; 0x15
    2d24:	7e 89       	ldd	r23, Y+22	; 0x16
    2d26:	8f 89       	ldd	r24, Y+23	; 0x17
    2d28:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9c 8b       	std	Y+20, r25	; 0x14
    2d40:	8b 8b       	std	Y+19, r24	; 0x13
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2d44:	6d 89       	ldd	r22, Y+21	; 0x15
    2d46:	7e 89       	ldd	r23, Y+22	; 0x16
    2d48:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	4c f5       	brge	.+82     	; 0x2dae <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9c 8b       	std	Y+20, r25	; 0x14
    2d82:	8b 8b       	std	Y+19, r24	; 0x13
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <LCD_displayCharacter+0x2ac>
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9a 8b       	std	Y+18, r25	; 0x12
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
    2d8e:	89 89       	ldd	r24, Y+17	; 0x11
    2d90:	9a 89       	ldd	r25, Y+18	; 0x12
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_displayCharacter+0x29a>
    2d96:	9a 8b       	std	Y+18, r25	; 0x12
    2d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	9c 8b       	std	Y+20, r25	; 0x14
    2da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <LCD_displayCharacter+0x28e>
    2dac:	14 c0       	rjmp	.+40     	; 0x2dd6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	6d 89       	ldd	r22, Y+21	; 0x15
    2db0:	7e 89       	ldd	r23, Y+22	; 0x16
    2db2:	8f 89       	ldd	r24, Y+23	; 0x17
    2db4:	98 8d       	ldd	r25, Y+24	; 0x18
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9c 8b       	std	Y+20, r25	; 0x14
    2dc0:	8b 8b       	std	Y+19, r24	; 0x13
    2dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc6:	98 8b       	std	Y+16, r25	; 0x10
    2dc8:	8f 87       	std	Y+15, r24	; 0x0f
    2dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dcc:	98 89       	ldd	r25, Y+16	; 0x10
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <LCD_displayCharacter+0x2d6>
    2dd2:	98 8b       	std	Y+16, r25	; 0x10
    2dd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_writePin>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e8       	ldi	r26, 0x80	; 128
    2de6:	bf e3       	ldi	r27, 0x3F	; 63
    2de8:	8b 87       	std	Y+11, r24	; 0x0b
    2dea:	9c 87       	std	Y+12, r25	; 0x0c
    2dec:	ad 87       	std	Y+13, r26	; 0x0d
    2dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	8f 83       	std	Y+7, r24	; 0x07
    2e0a:	98 87       	std	Y+8, r25	; 0x08
    2e0c:	a9 87       	std	Y+9, r26	; 0x09
    2e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	4c f5       	brge	.+82     	; 0x2e9c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e2       	ldi	r20, 0x20	; 32
    2e58:	51 e4       	ldi	r21, 0x41	; 65
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9e 83       	std	Y+6, r25	; 0x06
    2e70:	8d 83       	std	Y+5, r24	; 0x05
    2e72:	0f c0       	rjmp	.+30     	; 0x2e92 <LCD_displayCharacter+0x39a>
    2e74:	88 ec       	ldi	r24, 0xC8	; 200
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9c 83       	std	Y+4, r25	; 0x04
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_displayCharacter+0x388>
    2e84:	9c 83       	std	Y+4, r25	; 0x04
    2e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	69 f7       	brne	.-38     	; 0x2e74 <LCD_displayCharacter+0x37c>
    2e9a:	14 c0       	rjmp	.+40     	; 0x2ec4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_displayCharacter+0x3c4>
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ec4:	e9 96       	adiw	r28, 0x39	; 57
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <LCD_displayString+0x6>
    2edc:	0f 92       	push	r0
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	9b 83       	std	Y+3, r25	; 0x03
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ee6:	19 82       	std	Y+1, r1	; 0x01
    2ee8:	0e c0       	rjmp	.+28     	; 0x2f06 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	e2 0f       	add	r30, r18
    2ef8:	f3 1f       	adc	r31, r19
    2efa:	80 81       	ld	r24, Z
    2efc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <LCD_displayCharacter>
		i++;
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	fc 01       	movw	r30, r24
    2f12:	e2 0f       	add	r30, r18
    2f14:	f3 1f       	adc	r31, r19
    2f16:	80 81       	ld	r24, Z
    2f18:	88 23       	and	r24, r24
    2f1a:	39 f7       	brne	.-50     	; 0x2eea <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <LCD_moveCursor+0x6>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <LCD_moveCursor+0x8>
    2f30:	0f 92       	push	r0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	8a 83       	std	Y+2, r24	; 0x02
    2f38:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	3d 83       	std	Y+5, r19	; 0x05
    2f42:	2c 83       	std	Y+4, r18	; 0x04
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	9d 81       	ldd	r25, Y+5	; 0x05
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	c1 f0       	breq	.+48     	; 0x2f7e <LCD_moveCursor+0x56>
    2f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f50:	3d 81       	ldd	r19, Y+5	; 0x05
    2f52:	22 30       	cpi	r18, 0x02	; 2
    2f54:	31 05       	cpc	r19, r1
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <LCD_moveCursor+0x3a>
    2f58:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	61 f0       	breq	.+24     	; 0x2f78 <LCD_moveCursor+0x50>
    2f60:	19 c0       	rjmp	.+50     	; 0x2f94 <LCD_moveCursor+0x6c>
    2f62:	2c 81       	ldd	r18, Y+4	; 0x04
    2f64:	3d 81       	ldd	r19, Y+5	; 0x05
    2f66:	22 30       	cpi	r18, 0x02	; 2
    2f68:	31 05       	cpc	r19, r1
    2f6a:	69 f0       	breq	.+26     	; 0x2f86 <LCD_moveCursor+0x5e>
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	91 05       	cpc	r25, r1
    2f74:	61 f0       	breq	.+24     	; 0x2f8e <LCD_moveCursor+0x66>
    2f76:	0e c0       	rjmp	.+28     	; 0x2f94 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	0b c0       	rjmp	.+22     	; 0x2f94 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	80 5c       	subi	r24, 0xC0	; 192
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	07 c0       	rjmp	.+14     	; 0x2f94 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	80 5f       	subi	r24, 0xF0	; 240
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	03 c0       	rjmp	.+6      	; 0x2f94 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	80 5b       	subi	r24, 0xB0	; 176
    2f92:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	80 68       	ori	r24, 0x80	; 128
    2f98:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <LCD_displayStringRowColumn+0x6>
    2fb2:	00 d0       	rcall	.+0      	; 0x2fb4 <LCD_displayStringRowColumn+0x8>
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	6a 83       	std	Y+2, r22	; 0x02
    2fbc:	5c 83       	std	Y+4, r21	; 0x04
    2fbe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	6a 81       	ldd	r22, Y+2	; 0x02
    2fc4:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	62 97       	sbiw	r28, 0x12	; 18
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	9a 8b       	std	Y+18, r25	; 0x12
    2ff4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ff6:	89 89       	ldd	r24, Y+17	; 0x11
    2ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    2ffa:	9e 01       	movw	r18, r28
    2ffc:	2f 5f       	subi	r18, 0xFF	; 255
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	b9 01       	movw	r22, r18
    3002:	4a e0       	ldi	r20, 0x0A	; 10
    3004:	50 e0       	ldi	r21, 0x00	; 0
    3006:	0e 94 77 1a 	call	0x34ee	; 0x34ee <itoa>
   LCD_displayString(buff); /* Display the string */
    300a:	ce 01       	movw	r24, r28
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_displayString>
}
    3012:	62 96       	adiw	r28, 0x12	; 18
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <__vector_7>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* Timer1 CTC Mode ISR */
ISR(TIMER1_COMPA_vect)
{
    3038:	1f 92       	push	r1
    303a:	0f 92       	push	r0
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	0f 92       	push	r0
    3040:	11 24       	eor	r1, r1
    3042:	2f 93       	push	r18
    3044:	3f 93       	push	r19
    3046:	4f 93       	push	r20
    3048:	5f 93       	push	r21
    304a:	6f 93       	push	r22
    304c:	7f 93       	push	r23
    304e:	8f 93       	push	r24
    3050:	9f 93       	push	r25
    3052:	af 93       	push	r26
    3054:	bf 93       	push	r27
    3056:	ef 93       	push	r30
    3058:	ff 93       	push	r31
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3062:	80 91 a1 01 	lds	r24, 0x01A1
    3066:	90 91 a2 01 	lds	r25, 0x01A2
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	29 f0       	breq	.+10     	; 0x3078 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    306e:	e0 91 a1 01 	lds	r30, 0x01A1
    3072:	f0 91 a2 01 	lds	r31, 0x01A2
    3076:	09 95       	icall
	}
}
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	ff 91       	pop	r31
    307e:	ef 91       	pop	r30
    3080:	bf 91       	pop	r27
    3082:	af 91       	pop	r26
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	7f 91       	pop	r23
    308a:	6f 91       	pop	r22
    308c:	5f 91       	pop	r21
    308e:	4f 91       	pop	r20
    3090:	3f 91       	pop	r19
    3092:	2f 91       	pop	r18
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	0f 90       	pop	r0
    309a:	1f 90       	pop	r1
    309c:	18 95       	reti

0000309e <__vector_9>:

/* Timer1 Normal Mode ISR */
ISR(TIMER1_OVF_vect)
{
    309e:	1f 92       	push	r1
    30a0:	0f 92       	push	r0
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	0f 92       	push	r0
    30a6:	11 24       	eor	r1, r1
    30a8:	2f 93       	push	r18
    30aa:	3f 93       	push	r19
    30ac:	4f 93       	push	r20
    30ae:	5f 93       	push	r21
    30b0:	6f 93       	push	r22
    30b2:	7f 93       	push	r23
    30b4:	8f 93       	push	r24
    30b6:	9f 93       	push	r25
    30b8:	af 93       	push	r26
    30ba:	bf 93       	push	r27
    30bc:	ef 93       	push	r30
    30be:	ff 93       	push	r31
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    30c8:	80 91 a1 01 	lds	r24, 0x01A1
    30cc:	90 91 a2 01 	lds	r25, 0x01A2
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	29 f0       	breq	.+10     	; 0x30de <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    30d4:	e0 91 a1 01 	lds	r30, 0x01A1
    30d8:	f0 91 a2 01 	lds	r31, 0x01A2
    30dc:	09 95       	icall
	}
}
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	ff 91       	pop	r31
    30e4:	ef 91       	pop	r30
    30e6:	bf 91       	pop	r27
    30e8:	af 91       	pop	r26
    30ea:	9f 91       	pop	r25
    30ec:	8f 91       	pop	r24
    30ee:	7f 91       	pop	r23
    30f0:	6f 91       	pop	r22
    30f2:	5f 91       	pop	r21
    30f4:	4f 91       	pop	r20
    30f6:	3f 91       	pop	r19
    30f8:	2f 91       	pop	r18
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	0f 90       	pop	r0
    3100:	1f 90       	pop	r1
    3102:	18 95       	reti

00003104 <Timer1_init>:
 * 	2. Set the required clock.
 * 	3. Enable Timer1 CTC and Normal mode Interrupts.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <Timer1_init+0x6>
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	89 83       	std	Y+1, r24	; 0x01
	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->initial_value;
    3112:	ac e4       	ldi	r26, 0x4C	; 76
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e9 81       	ldd	r30, Y+1	; 0x01
    3118:	fa 81       	ldd	r31, Y+2	; 0x02
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	11 96       	adiw	r26, 0x01	; 1
    3120:	9c 93       	st	X, r25
    3122:	8e 93       	st	-X, r24

	/* Set the required mode */
	/* Non-PWM Mode */
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    3124:	af e4       	ldi	r26, 0x4F	; 79
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	ef e4       	ldi	r30, 0x4F	; 79
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8c 60       	ori	r24, 0x0C	; 12
    3130:	8c 93       	st	X, r24
	if (Config_Ptr->mode == NORMAL_MODE) {
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	85 81       	ldd	r24, Z+5	; 0x05
    3138:	88 23       	and	r24, r24
    313a:	e1 f4       	brne	.+56     	; 0x3174 <Timer1_init+0x70>

		/*Enable Timer1 Normal Mode (WGM12=0, WGM13=0) and (WGM10=0, WGM11=0) by default in TCCR1A*/
		TCCR1B &= ~((Config_Ptr->mode) << 3);
    313c:	ae e4       	ldi	r26, 0x4E	; 78
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	ee e4       	ldi	r30, 0x4E	; 78
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	28 2f       	mov	r18, r24
    3148:	e9 81       	ldd	r30, Y+1	; 0x01
    314a:	fa 81       	ldd	r31, Y+2	; 0x02
    314c:	85 81       	ldd	r24, Z+5	; 0x05
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	80 95       	com	r24
    3160:	82 23       	and	r24, r18
    3162:	8c 93       	st	X, r24

		/*Timer1 Normal Mode Interrupt Enable*/
		TIMSK  |= (1 << TOIE1);
    3164:	a9 e5       	ldi	r26, 0x59	; 89
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e9 e5       	ldi	r30, 0x59	; 89
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	84 60       	ori	r24, 0x04	; 4
    3170:	8c 93       	st	X, r24
    3172:	2e c0       	rjmp	.+92     	; 0x31d0 <Timer1_init+0xcc>
	}
	else if (Config_Ptr->mode == CTC_MODE) {
    3174:	e9 81       	ldd	r30, Y+1	; 0x01
    3176:	fa 81       	ldd	r31, Y+2	; 0x02
    3178:	85 81       	ldd	r24, Z+5	; 0x05
    317a:	84 30       	cpi	r24, 0x04	; 4
    317c:	49 f5       	brne	.+82     	; 0x31d0 <Timer1_init+0xcc>

		/*Enable Timer1 CTC Mode (WGM12=1, WGM13=0) and (WGM10=0, WGM11=0) by default in TCCR1A
		 *And insert the required clock value in the first three bits (CS10, CS11 and CS12)
		 * of TCCR1B Register */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->mode << 3) | (Config_Ptr->prescaler);
    317e:	ae e4       	ldi	r26, 0x4E	; 78
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	ee e4       	ldi	r30, 0x4E	; 78
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	28 2f       	mov	r18, r24
    318a:	28 7f       	andi	r18, 0xF8	; 248
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	85 81       	ldd	r24, Z+5	; 0x05
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	92 2f       	mov	r25, r18
    31a4:	98 2b       	or	r25, r24
    31a6:	e9 81       	ldd	r30, Y+1	; 0x01
    31a8:	fa 81       	ldd	r31, Y+2	; 0x02
    31aa:	84 81       	ldd	r24, Z+4	; 0x04
    31ac:	89 2b       	or	r24, r25
    31ae:	8c 93       	st	X, r24

		/*Set the required Compare Match Value*/
		OCR1A  = Config_Ptr->compare_value;
    31b0:	aa e4       	ldi	r26, 0x4A	; 74
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e9 81       	ldd	r30, Y+1	; 0x01
    31b6:	fa 81       	ldd	r31, Y+2	; 0x02
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	9c 93       	st	X, r25
    31c0:	8e 93       	st	-X, r24

		/*Timer1 CTC Mode Interrupt Enable*/
		TIMSK |= (1 << OCIE1A);
    31c2:	a9 e5       	ldi	r26, 0x59	; 89
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e9 e5       	ldi	r30, 0x59	; 89
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	80 61       	ori	r24, 0x10	; 16
    31ce:	8c 93       	st	X, r24
	}
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <Timer1_deInit>:
/*
 * Description :
 * Function to disable Timer1
 */
void Timer1_deInit(void)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
	/*Clear Timer1 Registers*/
	TCCR1A = 0;
    31e2:	ef e4       	ldi	r30, 0x4F	; 79
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	10 82       	st	Z, r1
	TCCR1B = 0;
    31e8:	ee e4       	ldi	r30, 0x4E	; 78
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	10 82       	st	Z, r1
	TCNT1  = 0;
    31ee:	ec e4       	ldi	r30, 0x4C	; 76
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	11 82       	std	Z+1, r1	; 0x01
    31f4:	10 82       	st	Z, r1
	OCR1A  = 0;
    31f6:	ea e4       	ldi	r30, 0x4A	; 74
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	11 82       	std	Z+1, r1	; 0x01
    31fc:	10 82       	st	Z, r1

	/*Disable Timer1 Normal Mode and CTC Mode Interrupts*/
	TIMSK  &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    31fe:	a9 e5       	ldi	r26, 0x59	; 89
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e9 e5       	ldi	r30, 0x59	; 89
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	8b 7e       	andi	r24, 0xEB	; 235
    320a:	8c 93       	st	X, r24
}
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the call back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <Timer1_setCallBack+0x6>
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	90 93 a2 01 	sts	0x01A2, r25
    3228:	80 93 a1 01 	sts	0x01A1, r24
}
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <UART_init+0x6>
    323c:	00 d0       	rcall	.+0      	; 0x323e <UART_init+0x8>
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	9c 83       	std	Y+4, r25	; 0x04
    3244:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3246:	1a 82       	std	Y+2, r1	; 0x02
    3248:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    324a:	eb e2       	ldi	r30, 0x2B	; 43
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Configure bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)| (GET_BIT(Config_Ptr->bit_data,2)<<2);
    3252:	aa e2       	ldi	r26, 0x2A	; 42
    3254:	b0 e0       	ldi	r27, 0x00	; 0
    3256:	eb 81       	ldd	r30, Y+3	; 0x03
    3258:	fc 81       	ldd	r31, Y+4	; 0x04
    325a:	80 81       	ld	r24, Z
    325c:	84 70       	andi	r24, 0x04	; 4
    325e:	88 61       	ori	r24, 0x18	; 24
    3260:	8c 93       	st	X, r24
	 * UPM1:0  = Configure parity bit
	 * USBS    = Configure stop bit
	 * UCSZ1:0 = Configure bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->parity) << 5) | ((Config_Ptr->stop_bit) << 3)
    3262:	a0 e4       	ldi	r26, 0x40	; 64
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	eb 81       	ldd	r30, Y+3	; 0x03
    3268:	fc 81       	ldd	r31, Y+4	; 0x04
    326a:	81 81       	ldd	r24, Z+1	; 0x01
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	82 95       	swap	r24
    3276:	92 95       	swap	r25
    3278:	90 7f       	andi	r25, 0xF0	; 240
    327a:	98 27       	eor	r25, r24
    327c:	80 7f       	andi	r24, 0xF0	; 240
    327e:	98 27       	eor	r25, r24
    3280:	28 2f       	mov	r18, r24
    3282:	20 68       	ori	r18, 0x80	; 128
    3284:	eb 81       	ldd	r30, Y+3	; 0x03
    3286:	fc 81       	ldd	r31, Y+4	; 0x04
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	88 2f       	mov	r24, r24
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	28 2b       	or	r18, r24
    329c:	eb 81       	ldd	r30, Y+3	; 0x03
    329e:	fc 81       	ldd	r31, Y+4	; 0x04
    32a0:	80 81       	ld	r24, Z
    32a2:	88 2f       	mov	r24, r24
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	86 70       	andi	r24, 0x06	; 6
    32a8:	90 70       	andi	r25, 0x00	; 0
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	82 2b       	or	r24, r18
    32b0:	8c 93       	st	X, r24
			           | (((Config_Ptr->bit_data) & 6) << 1);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    32b2:	eb 81       	ldd	r30, Y+3	; 0x03
    32b4:	fc 81       	ldd	r31, Y+4	; 0x04
    32b6:	83 81       	ldd	r24, Z+3	; 0x03
    32b8:	94 81       	ldd	r25, Z+4	; 0x04
    32ba:	a5 81       	ldd	r26, Z+5	; 0x05
    32bc:	b6 81       	ldd	r27, Z+6	; 0x06
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	aa 1f       	adc	r26, r26
    32c4:	bb 1f       	adc	r27, r27
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	aa 1f       	adc	r26, r26
    32d4:	bb 1f       	adc	r27, r27
    32d6:	9c 01       	movw	r18, r24
    32d8:	ad 01       	movw	r20, r26
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	92 e1       	ldi	r25, 0x12	; 18
    32de:	aa e7       	ldi	r26, 0x7A	; 122
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
    32ea:	da 01       	movw	r26, r20
    32ec:	c9 01       	movw	r24, r18
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    32f4:	e0 e4       	ldi	r30, 0x40	; 64
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	89 2f       	mov	r24, r25
    32fe:	99 27       	eor	r25, r25
    3300:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3302:	e9 e2       	ldi	r30, 0x29	; 41
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	80 83       	st	Z, r24
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	0f 92       	push	r0
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3324:	eb e2       	ldi	r30, 0x2B	; 43
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	80 72       	andi	r24, 0x20	; 32
    3330:	90 70       	andi	r25, 0x00	; 0
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	b9 f3       	breq	.-18     	; 0x3324 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3336:	ec e2       	ldi	r30, 0x2C	; 44
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    333e:	0f 90       	pop	r0
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    334e:	eb e2       	ldi	r30, 0x2B	; 43
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	88 23       	and	r24, r24
    3356:	dc f7       	brge	.-10     	; 0x334e <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3358:	ec e2       	ldi	r30, 0x2C	; 44
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
}
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <UART_sendString+0x6>
    336a:	0f 92       	push	r0
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	9b 83       	std	Y+3, r25	; 0x03
    3372:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3374:	19 82       	std	Y+1, r1	; 0x01
    3376:	0e c0       	rjmp	.+28     	; 0x3394 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	9b 81       	ldd	r25, Y+3	; 0x03
    3382:	fc 01       	movw	r30, r24
    3384:	e2 0f       	add	r30, r18
    3386:	f3 1f       	adc	r31, r19
    3388:	80 81       	ld	r24, Z
    338a:	0e 94 8c 19 	call	0x3318	; 0x3318 <UART_sendByte>
		i++;
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	8f 5f       	subi	r24, 0xFF	; 255
    3392:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	9b 81       	ldd	r25, Y+3	; 0x03
    339e:	fc 01       	movw	r30, r24
    33a0:	e2 0f       	add	r30, r18
    33a2:	f3 1f       	adc	r31, r19
    33a4:	80 81       	ld	r24, Z
    33a6:	88 23       	and	r24, r24
    33a8:	39 f7       	brne	.-50     	; 0x3378 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <UART_receiveString+0xa>
    33c0:	0f 92       	push	r0
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	9b 83       	std	Y+3, r25	; 0x03
    33c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33ca:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	9b 81       	ldd	r25, Y+3	; 0x03
    33d6:	8c 01       	movw	r16, r24
    33d8:	02 0f       	add	r16, r18
    33da:	13 1f       	adc	r17, r19
    33dc:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    33e0:	f8 01       	movw	r30, r16
    33e2:	80 83       	st	Z, r24
    33e4:	0f c0       	rjmp	.+30     	; 0x3404 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	8f 5f       	subi	r24, 0xFF	; 255
    33ea:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	8c 01       	movw	r16, r24
    33f8:	02 0f       	add	r16, r18
    33fa:	13 1f       	adc	r17, r19
    33fc:	0e 94 a3 19 	call	0x3346	; 0x3346 <UART_receiveByte>
    3400:	f8 01       	movw	r30, r16
    3402:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	9b 81       	ldd	r25, Y+3	; 0x03
    340e:	fc 01       	movw	r30, r24
    3410:	e2 0f       	add	r30, r18
    3412:	f3 1f       	adc	r31, r19
    3414:	80 81       	ld	r24, Z
    3416:	83 32       	cpi	r24, 0x23	; 35
    3418:	31 f7       	brne	.-52     	; 0x33e6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	10 82       	st	Z, r1
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	08 95       	ret

0000343c <__udivmodsi4>:
    343c:	a1 e2       	ldi	r26, 0x21	; 33
    343e:	1a 2e       	mov	r1, r26
    3440:	aa 1b       	sub	r26, r26
    3442:	bb 1b       	sub	r27, r27
    3444:	fd 01       	movw	r30, r26
    3446:	0d c0       	rjmp	.+26     	; 0x3462 <__udivmodsi4_ep>

00003448 <__udivmodsi4_loop>:
    3448:	aa 1f       	adc	r26, r26
    344a:	bb 1f       	adc	r27, r27
    344c:	ee 1f       	adc	r30, r30
    344e:	ff 1f       	adc	r31, r31
    3450:	a2 17       	cp	r26, r18
    3452:	b3 07       	cpc	r27, r19
    3454:	e4 07       	cpc	r30, r20
    3456:	f5 07       	cpc	r31, r21
    3458:	20 f0       	brcs	.+8      	; 0x3462 <__udivmodsi4_ep>
    345a:	a2 1b       	sub	r26, r18
    345c:	b3 0b       	sbc	r27, r19
    345e:	e4 0b       	sbc	r30, r20
    3460:	f5 0b       	sbc	r31, r21

00003462 <__udivmodsi4_ep>:
    3462:	66 1f       	adc	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	1a 94       	dec	r1
    346c:	69 f7       	brne	.-38     	; 0x3448 <__udivmodsi4_loop>
    346e:	60 95       	com	r22
    3470:	70 95       	com	r23
    3472:	80 95       	com	r24
    3474:	90 95       	com	r25
    3476:	9b 01       	movw	r18, r22
    3478:	ac 01       	movw	r20, r24
    347a:	bd 01       	movw	r22, r26
    347c:	cf 01       	movw	r24, r30
    347e:	08 95       	ret

00003480 <__prologue_saves__>:
    3480:	2f 92       	push	r2
    3482:	3f 92       	push	r3
    3484:	4f 92       	push	r4
    3486:	5f 92       	push	r5
    3488:	6f 92       	push	r6
    348a:	7f 92       	push	r7
    348c:	8f 92       	push	r8
    348e:	9f 92       	push	r9
    3490:	af 92       	push	r10
    3492:	bf 92       	push	r11
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	ca 1b       	sub	r28, r26
    34aa:	db 0b       	sbc	r29, r27
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	09 94       	ijmp

000034b8 <__epilogue_restores__>:
    34b8:	2a 88       	ldd	r2, Y+18	; 0x12
    34ba:	39 88       	ldd	r3, Y+17	; 0x11
    34bc:	48 88       	ldd	r4, Y+16	; 0x10
    34be:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ca:	b9 84       	ldd	r11, Y+9	; 0x09
    34cc:	c8 84       	ldd	r12, Y+8	; 0x08
    34ce:	df 80       	ldd	r13, Y+7	; 0x07
    34d0:	ee 80       	ldd	r14, Y+6	; 0x06
    34d2:	fd 80       	ldd	r15, Y+5	; 0x05
    34d4:	0c 81       	ldd	r16, Y+4	; 0x04
    34d6:	1b 81       	ldd	r17, Y+3	; 0x03
    34d8:	aa 81       	ldd	r26, Y+2	; 0x02
    34da:	b9 81       	ldd	r27, Y+1	; 0x01
    34dc:	ce 0f       	add	r28, r30
    34de:	d1 1d       	adc	r29, r1
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	ed 01       	movw	r28, r26
    34ec:	08 95       	ret

000034ee <itoa>:
    34ee:	fb 01       	movw	r30, r22
    34f0:	9f 01       	movw	r18, r30
    34f2:	e8 94       	clt
    34f4:	42 30       	cpi	r20, 0x02	; 2
    34f6:	c4 f0       	brlt	.+48     	; 0x3528 <itoa+0x3a>
    34f8:	45 32       	cpi	r20, 0x25	; 37
    34fa:	b4 f4       	brge	.+44     	; 0x3528 <itoa+0x3a>
    34fc:	4a 30       	cpi	r20, 0x0A	; 10
    34fe:	29 f4       	brne	.+10     	; 0x350a <itoa+0x1c>
    3500:	97 fb       	bst	r25, 7
    3502:	1e f4       	brtc	.+6      	; 0x350a <itoa+0x1c>
    3504:	90 95       	com	r25
    3506:	81 95       	neg	r24
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	64 2f       	mov	r22, r20
    350c:	77 27       	eor	r23, r23
    350e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__udivmodhi4>
    3512:	80 5d       	subi	r24, 0xD0	; 208
    3514:	8a 33       	cpi	r24, 0x3A	; 58
    3516:	0c f0       	brlt	.+2      	; 0x351a <itoa+0x2c>
    3518:	89 5d       	subi	r24, 0xD9	; 217
    351a:	81 93       	st	Z+, r24
    351c:	cb 01       	movw	r24, r22
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	a1 f7       	brne	.-24     	; 0x350a <itoa+0x1c>
    3522:	16 f4       	brtc	.+4      	; 0x3528 <itoa+0x3a>
    3524:	5d e2       	ldi	r21, 0x2D	; 45
    3526:	51 93       	st	Z+, r21
    3528:	10 82       	st	Z, r1
    352a:	c9 01       	movw	r24, r18
    352c:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <strrev>

00003530 <strrev>:
    3530:	dc 01       	movw	r26, r24
    3532:	fc 01       	movw	r30, r24
    3534:	67 2f       	mov	r22, r23
    3536:	71 91       	ld	r23, Z+
    3538:	77 23       	and	r23, r23
    353a:	e1 f7       	brne	.-8      	; 0x3534 <strrev+0x4>
    353c:	32 97       	sbiw	r30, 0x02	; 2
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <strrev+0x18>
    3540:	7c 91       	ld	r23, X
    3542:	6d 93       	st	X+, r22
    3544:	70 83       	st	Z, r23
    3546:	62 91       	ld	r22, -Z
    3548:	ae 17       	cp	r26, r30
    354a:	bf 07       	cpc	r27, r31
    354c:	c8 f3       	brcs	.-14     	; 0x3540 <strrev+0x10>
    354e:	08 95       	ret

00003550 <__udivmodhi4>:
    3550:	aa 1b       	sub	r26, r26
    3552:	bb 1b       	sub	r27, r27
    3554:	51 e1       	ldi	r21, 0x11	; 17
    3556:	07 c0       	rjmp	.+14     	; 0x3566 <__udivmodhi4_ep>

00003558 <__udivmodhi4_loop>:
    3558:	aa 1f       	adc	r26, r26
    355a:	bb 1f       	adc	r27, r27
    355c:	a6 17       	cp	r26, r22
    355e:	b7 07       	cpc	r27, r23
    3560:	10 f0       	brcs	.+4      	; 0x3566 <__udivmodhi4_ep>
    3562:	a6 1b       	sub	r26, r22
    3564:	b7 0b       	sbc	r27, r23

00003566 <__udivmodhi4_ep>:
    3566:	88 1f       	adc	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	5a 95       	dec	r21
    356c:	a9 f7       	brne	.-22     	; 0x3558 <__udivmodhi4_loop>
    356e:	80 95       	com	r24
    3570:	90 95       	com	r25
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	08 95       	ret

00003578 <_exit>:
    3578:	f8 94       	cli

0000357a <__stop_program>:
    357a:	ff cf       	rjmp	.-2      	; 0x357a <__stop_program>
